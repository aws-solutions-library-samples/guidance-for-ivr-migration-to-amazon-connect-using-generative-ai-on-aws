{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"title": "Intent",
	"type": "object",
	"required": ["intentName", "slotPriorities"],
	"properties": {
		"description": {
			"oneOf": [
				{
					"type": "string",
					"maxLength": 200
				}
			],
			"description": "Description of the intent."
		},
		"slotPriorities": {
			"oneOf": [
				{
					"type": "array",
					"items": {
						"$ref": "#/$defs/SlotPriority"
					},
					"minItems": 0,
					"maxItems": 5
				}
			],
			"description": "A list of the slot priorities for the intent. The first element in the array is the top priority, and the last element is the lowest priority. If you don't specify a priority, Amazon Lex does not consider the slot. Slot priorities override slot elimination."
		},
		"dialogCodeHook": {
			"oneOf": [
				{
					"$ref": "#/$defs/DialogCodeHook"
				}
			],
			"description": "Specifies that Amazon Lex invokes the alias Lambda function for each user input. You can invoke this Lambda function to personalize user interaction."
		},
		"fulfillmentCodeHook": {
			"oneOf": [
				{
					"$ref": "#/$defs/FulfillmentCodeHookSettings"
				}
			],
			"description": "Specifies that Amazon Lex invokes the alias Lambda function when the intent is ready for fulfillment. You can invoke this function to complete the bot's transaction with the user."
		},
		"initialResponseSetting": {
			"$ref": "#/$defs/InitialResponseSetting",
			"description": "Configuration settings for the response that is sent to the user at the beginning of a conversation, before eliciting slot values."
		},
		"inputContexts": {
			"oneOf": [
				{
					"type": "array",
					"items": {
						"$ref": "#/$defs/InputContext"
					},
					"minItems": 0,
					"maxItems": 5
				}
			],
			"description": "A list of contexts that must be active for this intent to be considered by Amazon Lex. When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent. A context can be automatically activated using the outputContexts property or it can be set at runtime. For example, if there are two intents with different input contexts that respond to the same utterances, only the intent with the active context will respond. An intent may have up to 5 input contexts. If an intent has multiple input contexts, all of the contexts must be active to consider the intent."
		},
		"intentClosingSetting": {
			"oneOf": [
				{
					"$ref": "#/$defs/IntentClosingSetting"
				}
			],
			"description": "Provides prompts that Amazon Lex sends to the user to confirm the completion of an intent. If the user answers 'no,' the settings contain a statement that is sent to the user to end the intent."
		},
		"intentConfirmationSetting": {
			"oneOf": [
				{
					"$ref": "#/$defs/IntentConfirmationSetting"
				}
			],
			"description": "Provides prompts that Amazon Lex sends to the user to confirm the completion of an intent. If the user answers 'no,' the settings contain a statement that is sent to the user to end the intent."
		},
		"intentName": {
			"type": "string",
			"description": "The name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.",
			"minLength": 1,
			"maxLength": 100,
			"pattern": "^([0-9a-zA-Z][_-]?){1,100}$"
		},
		"kendraConfiguration": {
			"oneOf": [
				{
					"$ref": "#/$defs/KendraConfiguration"
				}
			],
			"description": "Configuration information required to use the AMAZON.KendraSearchIntent intent to connect to an Amazon Kendra index. The AMAZON.KendraSearchIntent intent is called when Amazon Lex can't determine another intent to invoke."
		},
		"outputContexts": {
			"oneOf": [
				{
					"type": "array",
					"items": {
						"$ref": "#/$defs/OutputContext"
					},
					"minItems": 0,
					"maxItems": 10
				}
			],
			"description": "A lists of contexts that the intent activates when it is fulfilled. You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. When you use the outputContextsList property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active."
		},
		"parentIntentSignature": {
			"oneOf": [
				{
					"type": "string"
				}
			],
			"description": "A unique identifier for the built-in intent to base this intent on."
		},
		"qInConnectIntentConfiguration": {
			"oneOf": [
				{
					"$ref": "#/$defs/QInConnectIntentConfiguration"
				}
			],
			"description": "Specifies the configuration of the built-in Amazon.QnAIntent. The AMAZON.QnAIntent intent is called when Amazon Lex can't determine another intent to invoke. If you specify this field, you can't specify the kendraConfiguration field."
		},
		"sampleUtterances": {
			"type": "array",
			"description": "An array of strings that a user might say to signal the intent. For example, 'I want a pizza', or 'I want a {PizzaSize} pizza'. In an utterance, slot names are enclosed in curly braces (\"{\", \"}\") to indicate where they should be displayed in the utterance shown to the user.",
			"items": {
				"$ref": "#/$defs/SampleUtterance"
			}
		}
	},
	"$defs": {
		"DialogCodeHook": {
			"type": "object",
			"required": ["enabled"],
			"description": "Enables the dialog code hook so that it processes user requests.",
			"properties": {
				"enabled": {
					"type": "boolean"
				}
			}
		},
		"SlotPriority": {
			"type": "object",
			"required": ["priority", "slotName"],
			"description": "Determines the priority of a slot. A higher priority means that the slot value is more likely to be filled in by Amazon Lex.",
			"properties": {
				"priority": {
					"type": "integer",
					"description": "The priority of the slot. A higher priority means that the slot value is more likely to be filled in by Amazon Lex.",
					"minimum": 1,
					"maximum": 100
				},
				"slotName": {
					"type": "string",
					"description": "The name of the slot."
				}
			}
		},
		"FulfillmentCodeHookSettings": {
			"type": "object",
			"description": "Determines if a Lambda function should be invoked for a specific intent.",
			"required": ["enabled"],
			"properties": {
				"enabled": {
					"type": "boolean",
					"description": "Indicates whether a Lambda function should be invoked to fulfill a specific intent."
				},
				"active": {
					"type": "boolean",
					"description": "Determines whether the fulfillment code hook is used. When active is false, the code hook doesn't run."
				},
				"fulfillmentUpdatesSpecification": {
					"$ref": "#/$defs/FulfillmentUpdatesSpecification",
					"description": "Provides settings for update messages sent to the user for long-running Lambda fulfillment functions. Fulfillment updates can be used only with streaming conversations."
				},
				"postFulfillmentStatusSpecification": {
					"type": "object",
					"description": "",
					"properties": {}
				}
			}
		},
		"FulfillmentUpdatesSpecification": {
			"type": "object",
			"required": ["active"],
			"description": "Provides information for updating the user on the progress of fulfilling an intent.",
			"properties": {
				"active": {
					"type": "boolean",
					"description": "Determines whether fulfillment updates are sent to the user. When this field is true, updates are sent. If the active field is set to true, the startResponse, updateResponse, and timeoutInSeconds fields are required."
				},
				"startResponse": {
					"$ref": "#/$defs/FulfillmentStartResponseSpecification",
					"description": "Provides configuration information for the message sent to users when the fulfillment Lambda functions starts running."
				},
				"timeoutInSeconds": {
					"type": "integer",
					"description": "The length of time that the fulfillment Lambda function should run before it times out.",
					"minimum": 1,
					"maximum": 900
				},
				"updateResponse": {
					"$ref": "#/$defs/FulfillmentUpdateResponseSpecification",
					"description": "Provides configuration information for messages sent periodically to the user while the fulfillment Lambda function is running."
				}
			}
		},
		"FulfillmentStartResponseSpecification": {
			"type": "object",
			"description": "Provides the start response information that should be sent to the user when the intent is fulfilled.",
			"required": ["delayInSeconds", "messageGroups"],
			"properties": {
				"delayInSeconds": {
					"type": "integer",
					"description": "The delay between when the Lambda function starts running and the message is placed in the queue.",
					"minimum": 0,
					"maximum": 15
				},
				"messageGroups": {
					"type": "array",
					"description": "An array of objects, each of which provides information about a message.",
					"items": {
						"$ref": "#/$defs/MessageGroup"
					}
				},
				"allowInterrupt": {
					"type": "boolean",
					"description": "Indicates whether the user can interrupt an in-progress message while it is playing."
				}
			}
		},
		"MessageGroup": {
			"type": "object",
			"description": "Provides one or more messages that Amazon Lex should send to the user.",
			"required": ["message"],
			"properties": {
				"message": {
					"$ref": "#/$defs/Message",
					"description": "The primary message that Amazon Lex should send to the user."
				},
				"variations": {
					"oneOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/Message",
								"description": "Message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.",
								"minItems": 0,
								"maxItems": 2
							}
						}
					],
					"description": "An array of objects, each of which provides information about a message."
				}
			}
		},
		"Message": {
			"type": "object",
			"description": "Provides information about a message.",
			"properties": {
				"customPayload": {
					"oneOf": [
						{
							"$ref": "#/$defs/CustomPayload"
						}
					]
				},
				"imageResponseCard": {
					"oneOf": [
						{
							"$ref": "#/$defs/ImageResponseCard"
						}
					]
				},
				"plainTextMessage": {
					"oneOf": [
						{
							"$ref": "#/$defs/PlainTextMessage"
						}
					]
				},
				"ssmlMessage": {
					"oneOf": [
						{
							"$ref": "#/$defs/SSMLMessage"
						}
					]
				}
			}
		},
		"CustomPayload": {
			"type": "object",
			"required": ["value"],
			"description": "Provides information about a custom payload.",
			"properties": {
				"value": {
					"type": "string",
					"description": "The value of the custom payload.",
					"minLength": 1,
					"maxLength": 100
				}
			}
		},
		"ImageResponseCard": {
			"type": "object",
			"required": ["title"],
			"description": "Provides information about an image response card.",
			"properties": {
				"title": {
					"type": "string",
					"description": "The title of the image response card.",
					"minLength": 1,
					"maxLength": 250
				},
				"buttons": {
					"type": "array",
					"description": "A list of buttons that should be displayed on the response card. ",
					"items": {
						"$ref": "#/$defs/Button"
					},
					"minItems": 0,
					"maxItems": 5
				},
				"imageUrl": {
					"type": "string",
					"description": "The URL of an image to display on the response card.",
					"minLength": 1,
					"maxLength": 250
				},
				"subtitle": {
					"type": "string",
					"description": "The subtitle to display on the response card.",
					"minLength": 1,
					"maxLength": 250
				}
			}
		},
		"Button": {
			"type": "object",
			"required": ["text", "value"],
			"description": "Describes a button to use on a response card used to gather slot values from a user.",
			"properties": {
				"text": {
					"type": "string",
					"description": "The text that should be displayed on the button.",
					"minLength": 1,
					"maxLength": 50
				},
				"value": {
					"type": "string",
					"description": "The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.",
					"minLength": 1,
					"maxLength": 50
				}
			}
		},
		"PlainTextMessage": {
			"type": "object",
			"required": ["value"],
			"description": "Defines an ASCII text message to send to the user.",
			"properties": {
				"value": {
					"type": "string",
					"description": "The message to send to the user.",
					"minLength": 1,
					"maxLength": 1000
				}
			}
		},
		"SSMLMessage": {
			"type": "object",
			"required": ["value"],
			"description": "Defines a Speech Synthesis Markup Language (SSML) prompt.",
			"properties": {
				"value": {
					"type": "string",
					"description": "The SSML text that defines the prompt.",
					"minLength": 1,
					"maxLength": 1000
				}
			}
		},
		"FulfillmentUpdateResponseSpecification": {
			"type": "object",
			"required": ["frequencyInSeconds", "messageGroups"],
			"description": "Provides settings for a message that is sent periodically to the user while a fulfillment Lambda function is running.",
			"properties": {
				"frequencyInSeconds": {
					"type": "integer",
					"description": "The frequency that a message is sent to the user. When the period ends, Amazon Lex chooses a message from the message groups and plays it to the user. If the fulfillment Lambda returns before the first period ends, an update message is not played to the user.",
					"minimum": 1,
					"maximum": 900
				},
				"messageGroups": {
					"type": "array",
					"description": "1 - 5 message groups that contain update messages. Amazon Lex chooses one of the messages to play to the user.",
					"items": {
						"$ref": "#/$defs/MessageGroup"
					},
					"minItems": 1,
					"maxItems": 5
				},
				"allowInterrupt": {
					"type": "boolean",
					"description": "Determines whether the user can interrupt an update message while it is playing."
				}
			}
		},
		"InitialResponseSetting": {
			"type": "object",
			"description": "Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.",
			"properties": {
				"codeHook": {
					"oneOf": [
						{
							"$ref": "#/$defs/CodeHookInvocationSetting"
						}
					],
					"description": "Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation."
				},
				"conditional": {
					"oneOf": [
						{
							"$ref": "#/$defs/ConditionalSpecification"
						}
					],
					"description": "Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition."
				},
				"initialResponse": {
					"oneOf": [
						{
							"$ref": "#/$defs/ResponseSpecification"
						}
					],
					"description": "Specifies a list of message groups that Amazon Lex uses to respond the user input."
				},
				"nextStep": {
					"$ref": "#/$defs/DialogState",
					"description": "The next step in the conversation."
				}
			}
		},
		"CodeHookInvocationSetting": {
			"type": "object",
			"required": ["active", "enableCodeHookInvocation", "postCodeHookSpecification"],
			"description": "Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation.",
			"properties": {
				"active": {
					"type": "boolean",
					"description": "Determines whether a dialog code hook is used when the intent is activated."
				},
				"enableCodeHookInvocation": {
					"type": "boolean",
					"description": "Indicates whether a Lambda function should be invoked for the dialog."
				},
				"postCodeHookSpecification": {
					"$ref": "#/$defs/PostDialogCodeHookInvocationSpecification",
					"description": "Contains the responses and actions that Amazon Lex takes after the Lambda function is complete."
				},
				"invocationLabel": {
					"type": "string",
					"description": "A label that indicates the dialog step from which the dialog code hook is happening.",
					"minLength": 1,
					"maxLength": 100,
					"pattern": "^([0-9a-zA-Z][_-]?){1,100}$"
				}
			}
		},
		"PostDialogCodeHookInvocationSpecification": {
			"type": "object",
			"description": "Specifies next steps to run after the dialog code hook finishes.",
			"properties": {
				"failureConditional": {
					"$ref": "#/$defs/ConditionalSpecification",
					"description": "A list of conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed."
				},
				"failureNextStep": {
					"$ref": "#/$defs/DialogState",
					"description": "Specifies the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed."
				},
				"failureResponse": {
					"$ref": "#/$defs/ResponseSpecification",
					"description": "Specifies a list of message groups that Amazon Lex uses to respond the user input."
				},
				"successConditional": {
					"$ref": "#/$defs/ConditionalSpecification",
					"description": "A list of conditional branches to evaluate after the dialog code hook finishes successfully."
				},
				"successNextStep": {
					"$ref": "#/$defs/DialogState",
					"description": "Specifics the next step the bot runs after the dialog code hook finishes successfully."
				},
				"successResponse": {
					"$ref": "#/$defs/ResponseSpecification",
					"description": "Specifies a list of message groups that Amazon Lex uses to respond the user input."
				},
				"timeoutConditional": {
					"$ref": "#/$defs/ConditionalSpecification",
					"description": "A list of conditional branches to evaluate if the code hook times out."
				},
				"timeoutNextStep": {
					"$ref": "#/$defs/DialogState",
					"description": "Specifies the next step that the bot runs when the code hook times out."
				},
				"timeoutResponse": {
					"$ref": "#/$defs/ResponseSpecification",
					"description": "Specifies a list of message groups that Amazon Lex uses to respond the user input."
				}
			}
		},
		"ConditionalSpecification": {
			"type": "object",
			"required": ["active", "conditionalBranches", "defaultBranch"],
			"description": "Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.",
			"properties": {
				"active": {
					"type": "boolean",
					"description": "Determines whether a conditional branch is active. When active is false, the conditions are not evaluated.."
				},
				"conditionalBranches": {
					"type": "array",
					"description": "A list of conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true.",
					"items": {
						"$ref": "#/$defs/ConditionalBranch"
					},
					"minItems": 1,
					"maxItems": 4
				},
				"defaultBranch": {
					"$ref": "#/$defs/DefaultConditionalBranch",
					"description": "The default branch that is executed when no other branch has a matching condition."
				}
			}
		},
		"DialogState": {
			"type": "object",
			"description": "The current state of the conversation with the user.",
			"properties": {
				"dialogAction": {
					"$ref": "#/$defs/DialogAction",
					"description": "Defines the action that the bot executes at runtime when the conversation reaches this step."
				},
				"intent": {
					"$ref": "#/$defs/IntentOverride",
					"description": "Override settings to configure the intent state."
				},
				"sessionAttributes": {
					"type": "object",
					"additionalProperties": {
						"type": "string"
					},
					"description": "Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application."
				}
			}
		},
		"ResponseSpecification": {
			"type": "object",
			"required": ["messageGroups"],
			"description": "Specifies a list of message groups that Amazon Lex uses to respond the user input.",
			"properties": {
				"messageGroups": {
					"type": "array",
					"description": "A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime.",
					"items": {
						"$ref": "#/$defs/MessageGroup"
					},
					"minItems": 1,
					"maxItems": 5
				},
				"allowInterrupt": {
					"type": "boolean",
					"description": "Indicates whether the user can interrupt an in-progress message while it is playing."
				}
			}
		},
		"ConditionalBranch": {
			"type": "object",
			"required": ["condition", "name", "nextStep"],
			"description": "A set of actions that Amazon Lex should run if the condition is matched.",
			"properties": {
				"condition": {
					"$ref": "#/$defs/Condition",
					"description": "Contains the expression to evaluate. If the condition is true, the branch's actions are taken."
				},
				"name": {
					"type": "string",
					"description": "The name of the branch.",
					"minLength": 1,
					"maxLength": 100,
					"pattern": "^([0-9a-zA-Z][_-]?){1,100}$"
				},
				"nextStep": {
					"$ref": "#/$defs/DialogState",
					"description": "The next step in the conversation."
				},
				"response": {
					"$ref": "#/$defs/ResponseSpecification",
					"description": "Specifies a list of message groups that Amazon Lex uses to respond the user input."
				}
			}
		},
		"DefaultConditionalBranch": {
			"type": "object",
			"description": "A set of actions that Amazon Lex should run if none of the other conditions are met.",
			"properties": {
				"nextStep": {
					"$ref": "#/$defs/DialogState",
					"description": "The next step in the conversation."
				},
				"response": {
					"$ref": "#/$defs/ResponseSpecification",
					"description": "Specifies a list of message groups that Amazon Lex uses to respond the user input."
				}
			}
		},
		"Condition": {
			"type": "object",
			"required": ["expressionString"],
			"description": "Provides an expression that evaluates to true or false.",
			"properties": {
				"expressionString": {
					"type": "string",
					"description": "The expression string that is evaluated.",
					"minLength": 1,
					"maxLength": 1024
				}
			}
		},
		"DialogAction": {
			"type": "object",
			"required": ["type"],
			"description": "Defines the action that the bot executes at runtime when the conversation reaches this step.",
			"properties": {
				"type": {
					"type": "string",
					"description": "The action that the bot should execute.",
					"enum": [
						"ElicitIntent",
						"StartIntent",
						"ElicitSlot",
						"EvaluateConditional",
						"ConfirmIntent",
						"FulfillIntent",
						"CloseIntent",
						"EndConversation"
					]
				},
				"slotToElicit": {
					"oneOf": [
						{
							"type": "string",
							"minLength": 1,
							"maxLength": 100,
							"pattern": "^([0-9a-zA-Z][_-]?){1,100}$"
						}
					],
					"description": "If the dialog action is ElicitSlot, defines the slot to elicit from the user."
				},
				"suppressNextMessage": {
					"oneOf": [
						{
							"type": "boolean"
						}
					],
					"description": "When true the next message for the intent is not used."
				}
			}
		},
		"IntentOverride": {
			"type": "object",
			"description": "Override settings to configure the intent state..",
			"properties": {
				"name": {
					"oneOf": [
						{
							"type": "string",
							"minLength": 1,
							"maxLength": 100,
							"pattern": "^([0-9a-zA-Z][_-]?){1,100}$"
						}
					],
					"description": "The name of the intent. Only required when you're switching intents."
				},
				"slots": {
					"type": "object",
					"additionalProperties": {
						"$ref": "#/$defs/SlotValueOverride",
						"additionalProperties": false
					}
				}
			}
		},
		"SlotValueOverride": {
			"type": "object",
			"description": "The slot values that Amazon Lex uses when it sets slot values in a dialog step.",
			"properties": {
				"name": {
					"type": "string",
					"description": "When the shape value is List, it indicates that the values field contains a list of slot values. When the value is Scalar, it indicates that the value field contains a single value.",
					"enum": ["List", "Scalar"]
				},
				"value": {
					"$ref": "#/$defs/SlotValue",
					"description": "The current value of the slot."
				},
				"values": {
					"type": "array",
					"description": "A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be 'pepperoni' and 'pineapple.'",
					"items": {
						"$ref": "#/$defs/SlotValueOverride"
					}
				}
			}
		},
		"SlotValue": {
			"type": "object",
			"description": "The value to set in a slot.",
			"properties": {
				"interpretedValue": {
					"type": "string",
					"description": "The value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.",
					"minLength": 1
				}
			}
		},
		"InputContext": {
			"type": "object",
			"required": ["name"],
			"description": "A context that must be active for an intent to be selected by Amazon Lex.",
			"properties": {
				"name": {
					"type": "string",
					"description": "The name of the context.",
					"minLength": 1,
					"maxLength": 100,
					"pattern": "^([0-9a-zA-Z][_-]?){1,100}$"
				}
			}
		},
		"IntentClosingSetting": {
			"description": "Provides a statement the Amazon Lex bot conveys to the user when the intent is successfully fulfilled.",
			"type": "object",
			"properties": {
				"active": {
					"type": "boolean",
					"description": "Specifies whether the closing response is used. Defaults to true if not specified."
				},
				"closingResponse": {
					"$ref": "#/$defs/ResponseSpecification",
					"description": "The response sent to the user when the intent is complete."
				},
				"conditional": {
					"$ref": "#/$defs/ConditionalSpecification",
					"description": "A list of conditional branches executed when nextStep is set to EvaluateConditional."
				},
				"nextStep": {
					"$ref": "#/$defs/DialogState",
					"description": "Specifies the next step the bot takes after the closing response."
				}
			}
		},
		"IntentConfirmationSetting": {
			"type": "object",
			"required": ["promptSpecification"],
			"description": "Provides a prompt for making sure that the user is ready for the intent to be fulfilled.",
			"properties": {
				"promptSpecification": {
					"$ref": "#/$defs/PromptSpecification",
					"description": "Prompts the user to confirm the intent. This question should have a yes or no answer.Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. For example, with the OrderPizza intent, you might want to confirm that the order is correct before placing it. For other intents, such as intents that simply respond to user questions, you might not need to ask the user for confirmation before providing the information."
				},
				"active": {
					"type": "boolean",
					"description": "Specifies whether the intent's confirmation is sent to the user. When this field is false, confirmation and declination responses aren't sent. If the active field isn't specified, the default is true."
				},
				"codeHook": {
					"$ref": "#/$defs/CodeHookInvocationSetting",
					"description": "The CodeHookInvocationSetting object associated with intent's confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is InvokeDialogCodeHook."
				},
				"confirmationConditional": {
					"$ref": "#/$defs/ConditionalSpecification",
					"description": "A list of conditional branches to evaluate after the intent is closed.."
				},
				"confirmationNextStep": {
					"$ref": "#/$defs/DialogState",
					"description": "Specifies the next step that the bot executes when the customer confirms the intent."
				},
				"confirmationResponse": {
					"$ref": "#/$defs/ResponseSpecification",
					"description": "Specifies a list of message groups that Amazon Lex uses to respond the user input."
				},
				"declinationConditional": {
					"$ref": "#/$defs/ConditionalSpecification",
					"description": "A list of conditional branches to evaluate after the intent is declined."
				},
				"declinationNextStep": {
					"$ref": "#/$defs/DialogState",
					"description": "Specifies the next step that the bot executes when the customer declines the intent."
				},
				"declinationResponse": {
					"$ref": "#/$defs/ResponseSpecification",
					"description": "When the user answers 'no' to the question defined in promptSpecification, Amazon Lex responds with this response to acknowledge that the intent was canceled."
				},
				"elicitationCodeHook": {
					"$ref": "#/$defs/ElicitationCodeHookInvocationSetting",
					"description": "The CodeHookInvocationSetting used when the code hook is invoked during confirmation prompt retries."
				},
				"failureConditional": {
					"$ref": "#/$defs/ConditionalSpecification",
					"description": "Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition."
				},
				"failureNextStep": {
					"$ref": "#/$defs/DialogState",
					"description": "The next step to take in the conversation if the confirmation step fails."
				},
				"failureResponse": {
					"$ref": "#/$defs/ResponseSpecification",
					"description": "Specifies a list of message groups that Amazon Lex uses to respond the user input."
				}
			}
		},
		"KendraConfiguration": {
			"type": "object",
			"required": ["kendraIndex"],
			"description": "Provides configuration information for the AMAZON.KendraSearchIntent intent. When you use this intent, Amazon Lex searches the specified Amazon Kendra index and returns documents from the index that match the user's utterance.",
			"properties": {
				"kendraIndex": {
					"type": "string",
					"description": "The Amazon Resource Name (ARN) of the Amazon Kendra index that you want the AMAZON.KendraSearchIntent intent to search. The index must be in the same account and Region as the Amazon Lex bot.",
					"minLength": 32,
					"maxLength": 2048,
					"pattern": "^arn:aws:kendra:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:index/[a-zA-Z0-9][a-zA-Z0-9_-]*$"
				},
				"queryFilterString": {
					"type": "string",
					"description": "A query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra.",
					"minLength": 1,
					"maxLength": 5000
				},
				"queryFilterStringEnabled": {
					"type": "boolean",
					"description": "Determines whether the AMAZON.KendraSearchIntent intent uses a custom query string to query the Amazon Kendra index."
				}
			}
		},
		"OutputContext": {
			"type": "object",
			"required": ["name", "timeToLiveInSeconds", "turnsToLive"],
			"description": "Describes a session context that is activated when an intent is fulfilled.",
			"properties": {
				"name": {
					"type": "string",
					"description": "The name of the context.",
					"minLength": 1,
					"maxLength": 100,
					"pattern": "^([0-9a-zA-Z][_-]?){1,100}$"
				},
				"timeToLiveInSeconds": {
					"type": "integer",
					"description": "The amount of time, in seconds, that the output context should remain active. The time is figured from the first time the context is sent to the user.",
					"minimum": 5,
					"maximum": 86400
				},
				"turnsToLive": {
					"type": "integer",
					"description": "The number of conversation turns that the output context should remain active. The number of turns is counted from the first time that the context is sent to the user.",
					"minimum": 1,
					"maximum": 20
				}
			}
		},
		"QInConnectIntentConfiguration": {
			"type": "object",
			"description": "The configuration details of the Qinconnect intent.",
			"properties": {
				"qInConnectAssistantConfiguration": {
					"$ref": "#/$defs/QInConnectAssistantConfiguration",
					"description": "The Qinconnect assistant configuration details of the Qinconnect intent"
				}
			}
		},
		"SampleUtterance": {
			"type": "object",
			"required": ["utterance"],
			"description": "A sample utterance that invokes an intent or respond to a slot elicitation prompt.",
			"properties": {
				"utterance": {
					"type": "string",
					"description": "The sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents."
				}
			}
		},
		"PromptSpecification": {
			"type": "object",
			"required": ["maxRetries", "messageGroups"],
			"description": "Specifies a list of message groups that Amazon Lex sends to a user to elicit a response.",
			"properties": {
				"maxRetries": {
					"type": "integer",
					"description": "The maximum number of times the bot tries to elicit a response from the user using this prompt.",
					"minimum": 0,
					"maximum": 5
				},
				"messageGroups": {
					"type": "array",
					"description": "A collection of messages that Amazon Lex can send to the user. Amazon Lex chooses the actual message to send at runtime.",
					"items": {
						"$ref": "#/$defs/MessageGroup"
					},
					"minItems": 1,
					"maxItems": 5
				},
				"allowInterrupt": {
					"type": "boolean",
					"description": "Indicates whether the user can interrupt a speech prompt from the bot."
				},
				"messageSelectionStrategy": {
					"type": "string",
					"description": "Indicates how a message is selected from a message group among retries.",
					"enum": ["Ordered", "Random"]
				},
				"promptAttemptsSpecification": {
					"type": "object",
					"description": "Specifies the advanced settings on each attempt of the prompt.",
					"properties": {
						"Initial": {
							"$ref": "#/$defs/PromptAttemptSpecification"
						},
						"Retry1": {
							"$ref": "#/$defs/PromptAttemptSpecification"
						},
						"Retry2": {
							"$ref": "#/$defs/PromptAttemptSpecification"
						},
						"Retry3": {
							"$ref": "#/$defs/PromptAttemptSpecification"
						},
						"Retry4": {
							"$ref": "#/$defs/PromptAttemptSpecification"
						},
						"Retry5": {
							"$ref": "#/$defs/PromptAttemptSpecification"
						}
					}
				}
			}
		},
		"ElicitationCodeHookInvocationSetting": {
			"type": "object",
			"required": ["enableCodeHookInvocation"],
			"description": "Settings that specify the dialog code hook that is called by Amazon Lex between eliciting slot values.",
			"properties": {
				"enableCodeHookInvocation": {
					"type": "boolean",
					"description": "Indicates whether a Lambda function should be invoked for the dialog."
				},
				"invocationLabel": {
					"type": "string",
					"description": "A label that indicates the dialog step from which the dialog code hook is happening.",
					"minLength": 1,
					"maxLength": 100,
					"pattern": "^([0-9a-zA-Z][_-]?){1,100}$"
				}
			}
		},
		"QInConnectAssistantConfiguration": {
			"type": "object",
			"required": ["assistantArn"],
			"description": "The configuration details of the Qinconnect assistant.",
			"properties": {
				"assistantArn": {
					"type": "string",
					"description": "The assistant Arn details of the Qinconnect assistant configuration.",
					"pattern": "^arn:[a-z-]*?:wisdom:[a-z0-9-]*?:[0-9]{12}:[a-z-]*?/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(?:/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}){0,2}$"
				}
			}
		},
		"PromptAttemptSpecification": {
			"type": "object",
			"required": ["allowedInputTypes"],
			"description": "Specifies the settings on a prompt attempt.",
			"properties": {
				"allowedInputTypes": {
					"$ref": "#/$defs/AllowedInputTypes",
					"description": "Indicates the allowed input types of the prompt attempt."
				},
				"allowInterrupt": {
					"type": "boolean",
					"description": "Indicates whether the user can interrupt a speech prompt attempt from the bot."
				},
				"audioAndDTMFInputSpecification": {
					"$ref": "#/$defs/AudioAndDTMFInputSpecification",
					"description": "Specifies the settings on audio and DTMF input."
				},
				"textInputSpecification": {
					"$ref": "#/$defs/TextInputSpecification",
					"description": "Specifies the settings on text input."
				}
			}
		},
		"AllowedInputTypes": {
			"type": "object",
			"required": ["allowAudioInput", "allowDTMFInput"],
			"description": "Specifies the allowed input types.",
			"properties": {
				"allowAudioInput": {
					"type": "boolean",
					"description": "Indicates whether audio input is allowed."
				},
				"allowDTMFInput": {
					"type": "boolean",
					"description": "Indicates whether DTMF input is allowed."
				}
			}
		},
		"AudioAndDTMFInputSpecification": {
			"type": "object",
			"required": ["startTimeoutMs"],
			"description": "Specifies the audio and DTMF input specification.",
			"properties": {
				"startTimeoutMs": {
					"type": "integer",
					"description": "Time for which a bot waits before assuming that the customer isn't going to speak or press a key. This timeout is shared between Audio and DTMF inputs..",
					"minimum": 1
				},
				"audioSpecification": {
					"$ref": "#/$defs/AudioSpecification",
					"description": "Specifies the settings on audio input."
				},
				"dtmfSpecification": {
					"$ref": "#/$defs/DTMFSpecification",
					"description": "Specifies the DTMF input specification."
				}
			}
		},
		"TextInputSpecification": {
			"type": "object",
			"required": ["startTimeoutMs"],
			"description": "Specifies the text input specifications.",
			"properties": {
				"startTimeoutMs": {
					"type": "integer",
					"description": "TTime for which a bot waits before re-prompting a customer for text input.",
					"minimum": 1
				}
			}
		},
		"AudioSpecification": {
			"type": "object",
			"required": ["endTimeoutMs", "maxLengthMs"],
			"description": "Specifies the audio input specification.",
			"properties": {
				"endTimeoutMs": {
					"type": "integer",
					"description": "Time for which a bot waits after the customer stops speaking to assume the utterance is finished.",
					"minimum": 1
				},
				"maxLengthMs": {
					"type": "integer",
					"description": "Time for how long Amazon Lex waits before speech input is truncated and the speech is returned to application.",
					"minimum": 1
				}
			}
		},
		"DTMFSpecification": {
			"type": "object",
			"required": ["deletionCharacter", "endCharacter", "endTimeoutMs", "maxLength"],
			"description": "Specifies the DTMF input specification.",
			"properties": {
				"deletionCharacter": {
					"type": "string",
					"description": "The DTMF character that clears the accumulated DTMF digits and immediately ends the input.",
					"pattern": "^[A-D0-9#*]{1}$"
				},
				"endCharacter": {
					"type": "string",
					"description": "The DTMF character that immediately ends input. If the user does not press this character, the input ends after the end timeout.",
					"pattern": "^[A-D0-9#*]{1}$"
				},
				"endTimeoutMs": {
					"type": "integer",
					"description": "How long the bot should wait after the last DTMF character input before assuming that the input has concluded.",
					"minimum": 1
				},
				"maxLength": {
					"type": "integer",
					"description": "The maximum number of DTMF digits allowed in an utterance.",
					"minimum": 1,
					"maxLength": 1024
				}
			}
		}
	},
	"additionalProperties": false
}
