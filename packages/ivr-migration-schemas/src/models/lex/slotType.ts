/*
 * MIT No Attribution
 *
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface SlotTypeExportDefinition {
  /**
   * The unique identifier assigned to a slot type. This refers to either a built-in slot type or the unique slotTypeId of a custom slot type.
   */
  identifier?: string;
  compositeSlotTypeSetting?: CompositeSlotTypeSetting;
  /**
   * A description of the slot type. Use the description to help identify the slot type in lists.
   */
  description?: string;
  externalSourceSetting?: ExternalSourceSetting;
  /**
   * The built-in slot type used as a parent of this slot type. When you define a parent slot type, the new slot type has the configuration of the parent slot type.
   */
  parentSlotTypeSignature?: "AMAZON.AlphaNumeric";
  /**
   * The name for the slot. A slot type name must be unique within the intent.
   */
  slotTypeName: string;
  /**
   * @minItems 1
   * @maxItems 10000
   */
  slotTypeValues?: [SlotTypeValue, ...SlotTypeValue[]];
  valueSelectionSetting?: SlotValueSelectionSetting;
}
/**
 * Specifications for a composite slot type.
 */
export interface CompositeSlotTypeSetting {
  /**
   * @minItems 0
   * @maxItems 6
   */
  subSlots?:
    | []
    | [SubSlotTypeComposition]
    | [SubSlotTypeComposition, SubSlotTypeComposition]
    | [SubSlotTypeComposition, SubSlotTypeComposition, SubSlotTypeComposition]
    | [SubSlotTypeComposition, SubSlotTypeComposition, SubSlotTypeComposition, SubSlotTypeComposition]
    | [
        SubSlotTypeComposition,
        SubSlotTypeComposition,
        SubSlotTypeComposition,
        SubSlotTypeComposition,
        SubSlotTypeComposition
      ]
    | [
        SubSlotTypeComposition,
        SubSlotTypeComposition,
        SubSlotTypeComposition,
        SubSlotTypeComposition,
        SubSlotTypeComposition,
        SubSlotTypeComposition
      ];
}
/**
 * Subslot type composition.
 */
export interface SubSlotTypeComposition {
  /**
   * Name of a constituent sub slot inside a composite slot.
   */
  name: string;
  /**
   * The unique identifier assigned to a slot type. This refers to either a built-in slot type or the unique slotTypeId of a custom slot type.
   */
  slotTypeId: string;
}
/**
 * Sets the type of external information used to create the slot type.
 */
export interface ExternalSourceSetting {
  grammarSlotTypeSetting?: GrammarSlotTypeSetting;
}
/**
 * Settings required for a slot type based on a grammar that you provide.
 */
export interface GrammarSlotTypeSetting {
  source: GrammarSlotTypeSource;
}
/**
 * The source of the grammar used to create the slot type.
 */
export interface GrammarSlotTypeSource {
  /**
   * The name of the Amazon S3 bucket that contains the grammar source.
   */
  s3BucketName: string;
  /**
   * The path to the grammar in the Amazon S3 bucket.
   */
  s3ObjectKey: string;
  /**
   * The AWS KMS key required to decrypt the contents of the grammar, if any.
   */
  kmsKeyArn?: string;
}
/**
 * Each slot type can have a set of values. Each SlotTypeValue represents a value that the slot type can take.
 */
export interface SlotTypeValue {
  sampleValue?: SampleValue;
  /**
   * Additional values related to the slot type entry.
   *
   * @minItems 0
   * @maxItems 10000
   */
  synonyms?: SampleValue1[];
}
/**
 * The value of the slot type entry.
 */
export interface SampleValue {
  /**
   * The value that can be used for a slot type.
   */
  value: string;
}
/**
 * Defines one of the values for a slot type.
 */
export interface SampleValue1 {
  /**
   * The value that can be used for a slot type.
   */
  value: string;
}
/**
 * Determines the strategy that Amazon Lex uses to select a value from the list of possible values.
 */
export interface SlotValueSelectionSetting {
  /**
   * Determines the slot resolution strategy that Amazon Lex uses to return slot type values.
   */
  resolutionStrategy: "OriginalValue" | "TopResolution" | "Concatenation";
  /**
   * Provides settings that enable advanced recognition settings for slot values. You can use this to enable using slot values as a custom vocabulary for recognizing user utterances.
   */
  advancedRecognitionSetting?: AdvancedRecognitionSetting;
  /**
   * A regular expression used to validate the value of a slot.
   */
  regexFilter?: SlotValueRegexFilter;
}
/**
 * Provides settings that enable advanced recognition settings for slot values.
 */
export interface AdvancedRecognitionSetting {
  /**
   * Enables using the slot values as a custom vocabulary for recognizing user utterances.
   */
  audioRecognitionStrategy?: "UseSlotValuesAsCustomVocabulary";
}
/**
 * Provides a regular expression used to validate the value of a slot.
 */
export interface SlotValueRegexFilter {
  /**
   * A regular expression used to validate the value of a slot. Use a standard regular expression. Amazon Lex supports the following characters in the regular expression:
   * - A-Z, a-z
   * - 0-9
   * - Unicode characters ("\⁠u<Unicode>")
   * Represent Unicode characters with four digits, for example "\⁠u0041" or "\⁠u005A".
   * The following regular expression operators are not supported:
   * - Infinite repeaters: *, +, or {x,} with no upper bound.
   * - Wild card (.)
   */
  pattern: string;
}
