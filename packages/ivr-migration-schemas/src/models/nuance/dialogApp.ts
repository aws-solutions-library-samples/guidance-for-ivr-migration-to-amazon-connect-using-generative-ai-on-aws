/*
 * MIT No Attribution
 *
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Represents a node in a component.
 */
export type Node =
  | (SharedNodeProperties & {
      recognitionNode2: RecognitionNode2;
      [k: string]: unknown;
    })
  | (SharedNodeProperties & {
      messageNode: MessageNode;
      [k: string]: unknown;
    })
  | (SharedNodeProperties & {
      decisionNode: DecisionNode;
      [k: string]: unknown;
    })
  | (SharedNodeProperties & {
      dataaccessNode: DataAccessNode;
      [k: string]: unknown;
    })
  | (SharedNodeProperties & {
      controllerNode: ControllerNode;
      [k: string]: unknown;
    })
  | (SharedNodeProperties & {
      intentmapperNode2: IntentMapperNode2;
      [k: string]: unknown;
    })
  | (SharedNodeProperties & {
      componentNode: ComponentNode;
      [k: string]: unknown;
    })
  | (SharedNodeProperties & {
      startNode: StartNode;
      [k: string]: unknown;
    })
  | (SharedNodeProperties & {
      externalactionNode: ExternalactionNode;
      [k: string]: unknown;
    })
  | (SharedNodeProperties & {
      endNode: EndNode;
      [k: string]: unknown;
    })
  | (SharedNodeProperties & {
      transferNode: TransferNode;
      [k: string]: unknown;
    });
/**
 * Defines processing to perform for a specific entity or ASR value
 */
export type ActionConfiguration = {
  processingItems?: ProcessingItemGroup1;
  /**
   * UUID of processingItems
   */
  processingItemsId?: string;
  [k: string]: unknown;
} & (
  | {
      /**
       * Entity value associated with the processing items
       */
      conceptValue: string;
      [k: string]: unknown;
    }
  | {
      /**
       * ASR value associated with the processing items
       */
      asrValue: string;
      [k: string]: unknown;
    }
);
/**
 * Optional expression that determines if collection should occur.
 */
export type Expression = {
  /**
   * UUID of the expression.
   */
  id?: string;
  /**
   * Date and time of the last modification (ISO 8601 format).
   */
  lastModified?: string;
  /**
   * UUID of the variable for leftVariable type.
   */
  leftVariableId?: string;
  /**
   * UUID for leftVariableExpression type.
   */
  leftVariableExpressionId?: string;
  /**
   * UUID of the nested expression used as the left operand.
   */
  leftExpressionId?: string;
  /**
   * UUID of the variable for rightVariable type.
   */
  rightVariableId?: string;
  /**
   * UUID for rightVariableExpression type.
   */
  rightVariableExpressionId?: string;
  /**
   * UUID of the nested expression used as the right operand.
   */
  rightExpressionId?: string;
  [k: string]: unknown;
} & (
  | {
      /**
       * Variable used as the left operand.
       */
      leftVariable: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      leftVariableExpression: VariableExpression1;
      [k: string]: unknown;
    }
  | {
      leftExpression: Expression1;
      [k: string]: unknown;
    }
  | {
      /**
       * UUID of the entity whose value is the left operand.
       */
      leftConceptId: string;
      [k: string]: unknown;
    }
  | {
      /**
       * UUID of the entity whose literal is the left operand.
       */
      leftConceptIdLiteral: string;
      [k: string]: unknown;
    }
  | {
      /**
       * UUID of the entity whose formatted literal is the left operand.
       */
      leftConceptIdFormattedLiteral: string;
      [k: string]: unknown;
    }
  | {
      /**
       * Intent-related data to be used as the left operand.
       */
      leftIntent: "INTENT_VALUE" | "INTENT_LITERAL" | "INTENT_FORMATTED_LITERAL" | "INTENT_CONFIDENCE";
      [k: string]: unknown;
    }
  | {
      /**
       * Special operand such as interpretation results or NULL.
       */
      leftSpecialOperand: "LAST_COLLECTION_INTERPRETATION" | "LAST_CONFIRMATION_INTERPRETATION" | "NULL";
      [k: string]: unknown;
    }
) &
  (
    | {
        /**
         * Logical operator for combining boolean expressions.
         */
        logicalOperator: "NO_LOGICAL_OPERATOR" | "AND_OPERATOR" | "OR_OPERATOR";
        [k: string]: unknown;
      }
    | {
        /**
         * Mathematical operator used for numeric expressions.
         */
        mathematicalOperator: "NO_OP" | "PLUS" | "MINUS" | "TIMES" | "DIVIDE" | "MOD";
        [k: string]: unknown;
      }
    | {
        /**
         * Relational operator used for comparison between values.
         */
        relationalOperator:
          | "NO_RELATIONAL_OPERATOR"
          | "EQUAL_OPERATOR"
          | "NOT_EQUAL_OPERATOR"
          | "LESS_OPERATOR"
          | "GREATER_OPERATOR"
          | "LESS_EQUAL_OPERATOR"
          | "GREATER_EQUAL_OPERATOR";
        [k: string]: unknown;
      }
  ) &
  (
    | {
        /**
         * A constant string value used as the right operand.
         */
        rightConstant: string;
        [k: string]: unknown;
      }
    | {
        rightVariable: Variable3;
        [k: string]: unknown;
      }
    | {
        rightVariableExpression: VariableExpression2;
        [k: string]: unknown;
      }
    | {
        rightExpression: Expression2;
        [k: string]: unknown;
      }
    | {
        /**
         * UUID of the entity whose value is the right operand.
         */
        rightConceptId: string;
        [k: string]: unknown;
      }
    | {
        /**
         * UUID of the entity whose literal is the right operand.
         */
        rightConceptIdLiteral: string;
        [k: string]: unknown;
      }
    | {
        /**
         * UUID of the entity whose formatted literal is the right operand.
         */
        rightConceptIdFormattedLiteral: string;
        [k: string]: unknown;
      }
    | {
        /**
         * Intent-related value used as the right operand.
         */
        rightIntent: "INTENT_VALUE" | "INTENT_LITERAL" | "INTENT_FORMATTED_LITERAL" | "INTENT_CONFIDENCE";
        [k: string]: unknown;
      }
    | {
        /**
         * Special operand used as the right operand.
         */
        rightSpecialOperand: "LAST_COLLECTION_INTERPRETATION" | "LAST_CONFIRMATION_INTERPRETATION" | "NULL";
        [k: string]: unknown;
      }
    | {
        /**
         * UUID of the channel to use when leftVariableId is SYS_VAR_channel.
         */
        rightChannelId: string;
        [k: string]: unknown;
      }
  );
/**
 * Nested expression used as the left operand.
 */
export type Expression1 = {
  /**
   * UUID of the expression.
   */
  id?: string;
  /**
   * Date and time of the last modification (ISO 8601 format).
   */
  lastModified?: string;
  /**
   * UUID of the variable for leftVariable type.
   */
  leftVariableId?: string;
  /**
   * UUID for leftVariableExpression type.
   */
  leftVariableExpressionId?: string;
  /**
   * UUID of the nested expression used as the left operand.
   */
  leftExpressionId?: string;
  /**
   * UUID of the variable for rightVariable type.
   */
  rightVariableId?: string;
  /**
   * UUID for rightVariableExpression type.
   */
  rightVariableExpressionId?: string;
  /**
   * UUID of the nested expression used as the right operand.
   */
  rightExpressionId?: string;
  [k: string]: unknown;
} & (
  | {
      /**
       * Variable used as the left operand.
       */
      leftVariable: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      leftVariableExpression: VariableExpression1;
      [k: string]: unknown;
    }
  | {
      leftExpression: Expression1;
      [k: string]: unknown;
    }
  | {
      /**
       * UUID of the entity whose value is the left operand.
       */
      leftConceptId: string;
      [k: string]: unknown;
    }
  | {
      /**
       * UUID of the entity whose literal is the left operand.
       */
      leftConceptIdLiteral: string;
      [k: string]: unknown;
    }
  | {
      /**
       * UUID of the entity whose formatted literal is the left operand.
       */
      leftConceptIdFormattedLiteral: string;
      [k: string]: unknown;
    }
  | {
      /**
       * Intent-related data to be used as the left operand.
       */
      leftIntent: "INTENT_VALUE" | "INTENT_LITERAL" | "INTENT_FORMATTED_LITERAL" | "INTENT_CONFIDENCE";
      [k: string]: unknown;
    }
  | {
      /**
       * Special operand such as interpretation results or NULL.
       */
      leftSpecialOperand: "LAST_COLLECTION_INTERPRETATION" | "LAST_CONFIRMATION_INTERPRETATION" | "NULL";
      [k: string]: unknown;
    }
) &
  (
    | {
        /**
         * Logical operator for combining boolean expressions.
         */
        logicalOperator: "NO_LOGICAL_OPERATOR" | "AND_OPERATOR" | "OR_OPERATOR";
        [k: string]: unknown;
      }
    | {
        /**
         * Mathematical operator used for numeric expressions.
         */
        mathematicalOperator: "NO_OP" | "PLUS" | "MINUS" | "TIMES" | "DIVIDE" | "MOD";
        [k: string]: unknown;
      }
    | {
        /**
         * Relational operator used for comparison between values.
         */
        relationalOperator:
          | "NO_RELATIONAL_OPERATOR"
          | "EQUAL_OPERATOR"
          | "NOT_EQUAL_OPERATOR"
          | "LESS_OPERATOR"
          | "GREATER_OPERATOR"
          | "LESS_EQUAL_OPERATOR"
          | "GREATER_EQUAL_OPERATOR";
        [k: string]: unknown;
      }
  ) &
  (
    | {
        /**
         * A constant string value used as the right operand.
         */
        rightConstant: string;
        [k: string]: unknown;
      }
    | {
        rightVariable: Variable3;
        [k: string]: unknown;
      }
    | {
        rightVariableExpression: VariableExpression2;
        [k: string]: unknown;
      }
    | {
        rightExpression: Expression2;
        [k: string]: unknown;
      }
    | {
        /**
         * UUID of the entity whose value is the right operand.
         */
        rightConceptId: string;
        [k: string]: unknown;
      }
    | {
        /**
         * UUID of the entity whose literal is the right operand.
         */
        rightConceptIdLiteral: string;
        [k: string]: unknown;
      }
    | {
        /**
         * UUID of the entity whose formatted literal is the right operand.
         */
        rightConceptIdFormattedLiteral: string;
        [k: string]: unknown;
      }
    | {
        /**
         * Intent-related value used as the right operand.
         */
        rightIntent: "INTENT_VALUE" | "INTENT_LITERAL" | "INTENT_FORMATTED_LITERAL" | "INTENT_CONFIDENCE";
        [k: string]: unknown;
      }
    | {
        /**
         * Special operand used as the right operand.
         */
        rightSpecialOperand: "LAST_COLLECTION_INTERPRETATION" | "LAST_CONFIRMATION_INTERPRETATION" | "NULL";
        [k: string]: unknown;
      }
    | {
        /**
         * UUID of the channel to use when leftVariableId is SYS_VAR_channel.
         */
        rightChannelId: string;
        [k: string]: unknown;
      }
  );
/**
 * Nested expression used as the right operand.
 */
export type Expression2 = {
  /**
   * UUID of the expression.
   */
  id?: string;
  /**
   * Date and time of the last modification (ISO 8601 format).
   */
  lastModified?: string;
  /**
   * UUID of the variable for leftVariable type.
   */
  leftVariableId?: string;
  /**
   * UUID for leftVariableExpression type.
   */
  leftVariableExpressionId?: string;
  /**
   * UUID of the nested expression used as the left operand.
   */
  leftExpressionId?: string;
  /**
   * UUID of the variable for rightVariable type.
   */
  rightVariableId?: string;
  /**
   * UUID for rightVariableExpression type.
   */
  rightVariableExpressionId?: string;
  /**
   * UUID of the nested expression used as the right operand.
   */
  rightExpressionId?: string;
  [k: string]: unknown;
} & (
  | {
      /**
       * Variable used as the left operand.
       */
      leftVariable: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      leftVariableExpression: VariableExpression1;
      [k: string]: unknown;
    }
  | {
      leftExpression: Expression1;
      [k: string]: unknown;
    }
  | {
      /**
       * UUID of the entity whose value is the left operand.
       */
      leftConceptId: string;
      [k: string]: unknown;
    }
  | {
      /**
       * UUID of the entity whose literal is the left operand.
       */
      leftConceptIdLiteral: string;
      [k: string]: unknown;
    }
  | {
      /**
       * UUID of the entity whose formatted literal is the left operand.
       */
      leftConceptIdFormattedLiteral: string;
      [k: string]: unknown;
    }
  | {
      /**
       * Intent-related data to be used as the left operand.
       */
      leftIntent: "INTENT_VALUE" | "INTENT_LITERAL" | "INTENT_FORMATTED_LITERAL" | "INTENT_CONFIDENCE";
      [k: string]: unknown;
    }
  | {
      /**
       * Special operand such as interpretation results or NULL.
       */
      leftSpecialOperand: "LAST_COLLECTION_INTERPRETATION" | "LAST_CONFIRMATION_INTERPRETATION" | "NULL";
      [k: string]: unknown;
    }
) &
  (
    | {
        /**
         * Logical operator for combining boolean expressions.
         */
        logicalOperator: "NO_LOGICAL_OPERATOR" | "AND_OPERATOR" | "OR_OPERATOR";
        [k: string]: unknown;
      }
    | {
        /**
         * Mathematical operator used for numeric expressions.
         */
        mathematicalOperator: "NO_OP" | "PLUS" | "MINUS" | "TIMES" | "DIVIDE" | "MOD";
        [k: string]: unknown;
      }
    | {
        /**
         * Relational operator used for comparison between values.
         */
        relationalOperator:
          | "NO_RELATIONAL_OPERATOR"
          | "EQUAL_OPERATOR"
          | "NOT_EQUAL_OPERATOR"
          | "LESS_OPERATOR"
          | "GREATER_OPERATOR"
          | "LESS_EQUAL_OPERATOR"
          | "GREATER_EQUAL_OPERATOR";
        [k: string]: unknown;
      }
  ) &
  (
    | {
        /**
         * A constant string value used as the right operand.
         */
        rightConstant: string;
        [k: string]: unknown;
      }
    | {
        rightVariable: Variable3;
        [k: string]: unknown;
      }
    | {
        rightVariableExpression: VariableExpression2;
        [k: string]: unknown;
      }
    | {
        rightExpression: Expression2;
        [k: string]: unknown;
      }
    | {
        /**
         * UUID of the entity whose value is the right operand.
         */
        rightConceptId: string;
        [k: string]: unknown;
      }
    | {
        /**
         * UUID of the entity whose literal is the right operand.
         */
        rightConceptIdLiteral: string;
        [k: string]: unknown;
      }
    | {
        /**
         * UUID of the entity whose formatted literal is the right operand.
         */
        rightConceptIdFormattedLiteral: string;
        [k: string]: unknown;
      }
    | {
        /**
         * Intent-related value used as the right operand.
         */
        rightIntent: "INTENT_VALUE" | "INTENT_LITERAL" | "INTENT_FORMATTED_LITERAL" | "INTENT_CONFIDENCE";
        [k: string]: unknown;
      }
    | {
        /**
         * Special operand used as the right operand.
         */
        rightSpecialOperand: "LAST_COLLECTION_INTERPRETATION" | "LAST_CONFIRMATION_INTERPRETATION" | "NULL";
        [k: string]: unknown;
      }
    | {
        /**
         * UUID of the channel to use when leftVariableId is SYS_VAR_channel.
         */
        rightChannelId: string;
        [k: string]: unknown;
      }
  );
/**
 * Optional expression to evaluate after collection.
 */
export type Expression3 = {
  /**
   * UUID of the expression.
   */
  id?: string;
  /**
   * Date and time of the last modification (ISO 8601 format).
   */
  lastModified?: string;
  /**
   * UUID of the variable for leftVariable type.
   */
  leftVariableId?: string;
  /**
   * UUID for leftVariableExpression type.
   */
  leftVariableExpressionId?: string;
  /**
   * UUID of the nested expression used as the left operand.
   */
  leftExpressionId?: string;
  /**
   * UUID of the variable for rightVariable type.
   */
  rightVariableId?: string;
  /**
   * UUID for rightVariableExpression type.
   */
  rightVariableExpressionId?: string;
  /**
   * UUID of the nested expression used as the right operand.
   */
  rightExpressionId?: string;
  [k: string]: unknown;
} & (
  | {
      /**
       * Variable used as the left operand.
       */
      leftVariable: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      leftVariableExpression: VariableExpression1;
      [k: string]: unknown;
    }
  | {
      leftExpression: Expression1;
      [k: string]: unknown;
    }
  | {
      /**
       * UUID of the entity whose value is the left operand.
       */
      leftConceptId: string;
      [k: string]: unknown;
    }
  | {
      /**
       * UUID of the entity whose literal is the left operand.
       */
      leftConceptIdLiteral: string;
      [k: string]: unknown;
    }
  | {
      /**
       * UUID of the entity whose formatted literal is the left operand.
       */
      leftConceptIdFormattedLiteral: string;
      [k: string]: unknown;
    }
  | {
      /**
       * Intent-related data to be used as the left operand.
       */
      leftIntent: "INTENT_VALUE" | "INTENT_LITERAL" | "INTENT_FORMATTED_LITERAL" | "INTENT_CONFIDENCE";
      [k: string]: unknown;
    }
  | {
      /**
       * Special operand such as interpretation results or NULL.
       */
      leftSpecialOperand: "LAST_COLLECTION_INTERPRETATION" | "LAST_CONFIRMATION_INTERPRETATION" | "NULL";
      [k: string]: unknown;
    }
) &
  (
    | {
        /**
         * Logical operator for combining boolean expressions.
         */
        logicalOperator: "NO_LOGICAL_OPERATOR" | "AND_OPERATOR" | "OR_OPERATOR";
        [k: string]: unknown;
      }
    | {
        /**
         * Mathematical operator used for numeric expressions.
         */
        mathematicalOperator: "NO_OP" | "PLUS" | "MINUS" | "TIMES" | "DIVIDE" | "MOD";
        [k: string]: unknown;
      }
    | {
        /**
         * Relational operator used for comparison between values.
         */
        relationalOperator:
          | "NO_RELATIONAL_OPERATOR"
          | "EQUAL_OPERATOR"
          | "NOT_EQUAL_OPERATOR"
          | "LESS_OPERATOR"
          | "GREATER_OPERATOR"
          | "LESS_EQUAL_OPERATOR"
          | "GREATER_EQUAL_OPERATOR";
        [k: string]: unknown;
      }
  ) &
  (
    | {
        /**
         * A constant string value used as the right operand.
         */
        rightConstant: string;
        [k: string]: unknown;
      }
    | {
        rightVariable: Variable3;
        [k: string]: unknown;
      }
    | {
        rightVariableExpression: VariableExpression2;
        [k: string]: unknown;
      }
    | {
        rightExpression: Expression2;
        [k: string]: unknown;
      }
    | {
        /**
         * UUID of the entity whose value is the right operand.
         */
        rightConceptId: string;
        [k: string]: unknown;
      }
    | {
        /**
         * UUID of the entity whose literal is the right operand.
         */
        rightConceptIdLiteral: string;
        [k: string]: unknown;
      }
    | {
        /**
         * UUID of the entity whose formatted literal is the right operand.
         */
        rightConceptIdFormattedLiteral: string;
        [k: string]: unknown;
      }
    | {
        /**
         * Intent-related value used as the right operand.
         */
        rightIntent: "INTENT_VALUE" | "INTENT_LITERAL" | "INTENT_FORMATTED_LITERAL" | "INTENT_CONFIDENCE";
        [k: string]: unknown;
      }
    | {
        /**
         * Special operand used as the right operand.
         */
        rightSpecialOperand: "LAST_COLLECTION_INTERPRETATION" | "LAST_CONFIRMATION_INTERPRETATION" | "NULL";
        [k: string]: unknown;
      }
    | {
        /**
         * UUID of the channel to use when leftVariableId is SYS_VAR_channel.
         */
        rightChannelId: string;
        [k: string]: unknown;
      }
  );
/**
 * Optional expression for handling multiple mentions.
 */
export type Expression4 = {
  /**
   * UUID of the expression.
   */
  id?: string;
  /**
   * Date and time of the last modification (ISO 8601 format).
   */
  lastModified?: string;
  /**
   * UUID of the variable for leftVariable type.
   */
  leftVariableId?: string;
  /**
   * UUID for leftVariableExpression type.
   */
  leftVariableExpressionId?: string;
  /**
   * UUID of the nested expression used as the left operand.
   */
  leftExpressionId?: string;
  /**
   * UUID of the variable for rightVariable type.
   */
  rightVariableId?: string;
  /**
   * UUID for rightVariableExpression type.
   */
  rightVariableExpressionId?: string;
  /**
   * UUID of the nested expression used as the right operand.
   */
  rightExpressionId?: string;
  [k: string]: unknown;
} & (
  | {
      /**
       * Variable used as the left operand.
       */
      leftVariable: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      leftVariableExpression: VariableExpression1;
      [k: string]: unknown;
    }
  | {
      leftExpression: Expression1;
      [k: string]: unknown;
    }
  | {
      /**
       * UUID of the entity whose value is the left operand.
       */
      leftConceptId: string;
      [k: string]: unknown;
    }
  | {
      /**
       * UUID of the entity whose literal is the left operand.
       */
      leftConceptIdLiteral: string;
      [k: string]: unknown;
    }
  | {
      /**
       * UUID of the entity whose formatted literal is the left operand.
       */
      leftConceptIdFormattedLiteral: string;
      [k: string]: unknown;
    }
  | {
      /**
       * Intent-related data to be used as the left operand.
       */
      leftIntent: "INTENT_VALUE" | "INTENT_LITERAL" | "INTENT_FORMATTED_LITERAL" | "INTENT_CONFIDENCE";
      [k: string]: unknown;
    }
  | {
      /**
       * Special operand such as interpretation results or NULL.
       */
      leftSpecialOperand: "LAST_COLLECTION_INTERPRETATION" | "LAST_CONFIRMATION_INTERPRETATION" | "NULL";
      [k: string]: unknown;
    }
) &
  (
    | {
        /**
         * Logical operator for combining boolean expressions.
         */
        logicalOperator: "NO_LOGICAL_OPERATOR" | "AND_OPERATOR" | "OR_OPERATOR";
        [k: string]: unknown;
      }
    | {
        /**
         * Mathematical operator used for numeric expressions.
         */
        mathematicalOperator: "NO_OP" | "PLUS" | "MINUS" | "TIMES" | "DIVIDE" | "MOD";
        [k: string]: unknown;
      }
    | {
        /**
         * Relational operator used for comparison between values.
         */
        relationalOperator:
          | "NO_RELATIONAL_OPERATOR"
          | "EQUAL_OPERATOR"
          | "NOT_EQUAL_OPERATOR"
          | "LESS_OPERATOR"
          | "GREATER_OPERATOR"
          | "LESS_EQUAL_OPERATOR"
          | "GREATER_EQUAL_OPERATOR";
        [k: string]: unknown;
      }
  ) &
  (
    | {
        /**
         * A constant string value used as the right operand.
         */
        rightConstant: string;
        [k: string]: unknown;
      }
    | {
        rightVariable: Variable3;
        [k: string]: unknown;
      }
    | {
        rightVariableExpression: VariableExpression2;
        [k: string]: unknown;
      }
    | {
        rightExpression: Expression2;
        [k: string]: unknown;
      }
    | {
        /**
         * UUID of the entity whose value is the right operand.
         */
        rightConceptId: string;
        [k: string]: unknown;
      }
    | {
        /**
         * UUID of the entity whose literal is the right operand.
         */
        rightConceptIdLiteral: string;
        [k: string]: unknown;
      }
    | {
        /**
         * UUID of the entity whose formatted literal is the right operand.
         */
        rightConceptIdFormattedLiteral: string;
        [k: string]: unknown;
      }
    | {
        /**
         * Intent-related value used as the right operand.
         */
        rightIntent: "INTENT_VALUE" | "INTENT_LITERAL" | "INTENT_FORMATTED_LITERAL" | "INTENT_CONFIDENCE";
        [k: string]: unknown;
      }
    | {
        /**
         * Special operand used as the right operand.
         */
        rightSpecialOperand: "LAST_COLLECTION_INTERPRETATION" | "LAST_CONFIRMATION_INTERPRETATION" | "NULL";
        [k: string]: unknown;
      }
    | {
        /**
         * UUID of the channel to use when leftVariableId is SYS_VAR_channel.
         */
        rightChannelId: string;
        [k: string]: unknown;
      }
  );
/**
 * Defines a dynamic placeholder within a prompt.
 */
export type Annotation = {
  /**
   * Key-value pair representing the annotation payload.
   */
  "annotation payload"?: {
    [k: string]: unknown;
  };
  /**
   * UUID if the payload type is 'variable'.
   */
  variableId?: string;
  /**
   * UUID if the payload type is 'variableExpression'.
   */
  variableExpressionId?: string;
  /**
   * Formatting type (e.g., digits, currency).
   */
  type?: string;
  /**
   * Formatting and display attributes.
   */
  properties?: {
    /**
     * Determines the format editor to use in Mix.dialog for this annotation—one of: ALPHA_NUM_TYPE, CURRENCY_TYPE, DATE_TYPE, DECIMAL_TYPE, DIGITS_TYPE, DISTANCE_TYPE, CARDINAL_NUMBER_TYPE, TEMPERATURE_TYPE, DISTANCE_TYPE, TIME_TYPE
     */
    formType?: string;
    /**
     * Display text for the annotation.
     */
    string?: string;
    /**
     * If true, uses the advanced editor.
     */
    advanced?: string;
    /**
     * Pattern to format the value.
     */
    pattern?: string;
    /**
     * If true, applies thousands separator.
     */
    thousandSeparator?: boolean;
    /**
     * Play 'zero dollars' if amount is zero.
     */
    playZeroDollars?: boolean;
    /**
     * Play 'zero cents' if amount is zero.
     */
    playZeroCents?: boolean;
    /**
     * Use special audio for hundreds position in amounts.
     */
    playPrehundred?: boolean;
    /**
     * Currency symbol or code for display.
     */
    currency?: string;
    /**
     * Order and parts of date to play.
     */
    partsOfDate?: string;
    /**
     * Include day of the week in playback.
     */
    playDayOfTheWeek?: boolean;
    /**
     * Order and parts of time to play.
     */
    partsOfTime?: string;
    /**
     * Hour format: 12 or 24.
     */
    clock24?: string;
    /**
     * Number of decimal places to show.
     */
    decimalPlaces?: string;
    /**
     * Play 'zero point' for zero values.
     */
    playZeroUnits?: boolean;
    /**
     * Play zero decimals in output.
     */
    playZeroDecimals?: boolean;
    /**
     * Unit of distance to show (e.g., km, mi).
     */
    distanceType?: string;
    /**
     * Temperature unit to show (e.g., C, F).
     */
    tempType?: string;
    /**
     * Intonation for recorded audio: medial or final.
     */
    intonation?: string;
    /**
     * Grammatical case for certain languages (e.g., nominative, dative).
     */
    case?: string;
    /**
     * Force TTS format for annotations.
     */
    forceTTS?: boolean;
    /**
     * Custom SSML open tag.
     */
    ssmlOpenFreeform?: string;
    /**
     * Custom SSML close tag.
     */
    ssmlCloseFreeform?: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
} & (
  | {
      variable: Variable4;
      [k: string]: unknown;
    }
  | {
      variableExpression: VariableExpression3;
      [k: string]: unknown;
    }
  | {
      /**
       * UUID of the entity that contains dynamic content to include in the message
       */
      conceptId: string;
      [k: string]: unknown;
    }
  | {
      /**
       * UUID of the entity whose literal is to include in the message
       */
      conceptIdLiteral: string;
      [k: string]: unknown;
    }
  | {
      /**
       * UUID of the entity whose formatted literal is to include in the message
       */
      conceptIdFormattedLiteral: string;
      [k: string]: unknown;
    }
  | {
      /**
       * One of: ENTITY_VALUE, ENTITY_LITERAL, ENTITY_FORMATTED_LITERAL, to include in a global confirmation message—Mix.dialog only supports ENTITY_VALUE (current entity value from the last NLU interpretation result)
       */
      currentEntity: string;
      [k: string]: unknown;
    }
  | {
      /**
       * One of: INTENT_VALUE (active intent value), INTENT_LITERAL (active intent literal), INTENT_FORMATTED_LITERAL (formatted version of the active intent literal),INTENT_CONFIDENCE (active intent confidence score), to include in the message
       */
      intent: string;
      [k: string]: unknown;
    }
);

export interface NuanceMixProjectSchema {
  data?: Project;
  [k: string]: unknown;
}
export interface Project {
  /**
   * Unique identifier for the project
   */
  id?: string;
  /**
   * Name of the project
   */
  name?: string;
  /**
   * Default locale for the project, as a 4-letter language code (e.g., en-US)
   */
  defaultLocale?: string;
  /**
   * Supported locales for the project
   */
  supportedLocales?: string[];
  /**
   * Deprecated
   */
  connectorColors?: {
    [k: string]: unknown;
  };
  /**
   * Base application URL (e.g., mycompany.com/mix)
   */
  baseServiceUrl?: string;
  /**
   * ID of the master project, used to link different versions
   */
  staticProjectId?: string;
  /**
   * Version number of the project
   */
  version?: string;
  /**
   * Standard channels for system interaction (e.g., IVR, Web, SMS)
   */
  supportedChannels?: Channel[];
  /**
   * Deprecated
   */
  supportedCustomChannels?: unknown[];
  /**
   * Deprecated
   */
  richTextChannels?: unknown[];
  /**
   * Global and default confirmation behaviors
   */
  globalConfirmations?: Confirmation[];
  /**
   * Components in the project
   */
  components?: Component[];
  /**
   * Global and channel-specific recovery handling
   */
  recovery?: RecoveryHandling[];
  /**
   * Variables used in the project
   */
  variables?: Variable[];
  /**
   * Complex variable schemas in the project
   */
  complexVariableTypes?: Schema[];
  /**
   * Messages used in the project
   */
  promptGroups?: PromptGroup[];
  /**
   * ID of the parent project
   */
  parentId?: string;
  /**
   * UUID of the ontology used for this dialog project
   */
  ontologyId?: string;
  ontology?: Ontology;
  /**
   * Deprecated (superseded by globalSettingOverrides)
   */
  globalSettings?: unknown[];
  /**
   * Backend connection presets for the project
   */
  backendConfig?: BackendConnectionPreset[];
  /**
   * Internal version number used for upgrade reference
   */
  upgradeVersion?: number;
  /**
   * Global and custom events in the project
   */
  events?: Event[];
  /**
   * UUID of the entity used to store a command from the user
   */
  globalCommandsEntityId?: string;
  /**
   * Global commands defined in the project
   */
  globalCommands?: Command[];
  /**
   * Data host aliases
   */
  dressAliases?: DataHostAlias[];
  /**
   * Overrides to the default global settings for the project
   */
  globalSettingOverrides?: GlobalSettingOverride[];
  /**
   * Version of the Dialog runtime service to target
   */
  ndfVersion?: string;
  /**
   * Global mappings from intents to components
   */
  projectIntentMappings?: ProjectIntentMapping[];
  /**
   * Engine pack version for self-hosted Mix environments
   */
  enginePackVersion?: string;
  /**
   * Default base URL for external grammars
   */
  environmentConfigurations?: EnvironmentConfiguration[];
  /**
   * Creation date and time for this project version
   */
  versionTimestamp?: string;
  /**
   * Date and time of the last modification
   */
  lastModified?: string;
  [k: string]: unknown;
}
export interface Channel {
  /**
   * Unique ID of the channel
   */
  id?: string;
  /**
   * Name of the channel—Default is a reserved name for the combination of all channels in a project
   */
  displayName?: string;
  /**
   * Deprecated
   */
  codeName?: string;
  /**
   * Deprecated
   */
  modes?: string[];
  /**
   * true if the channel is disabled; otherwise, false
   */
  disabled?: boolean;
  /**
   * Color code for the channel (for example, #31B96E)
   */
  connectorColor?: string;
  /**
   * Modalities available for messages in this channel
   */
  channelModes?: Modality[];
  /**
   * Date and time of the last modification
   */
  lastModified?: string;
}
/**
 * Represents a modality in a channel.
 */
export interface Modality {
  /**
   * UUID of the modality
   */
  id?: string;
  /**
   * UUID of the channel
   */
  channelId?: string;
  /**
   * One of the supported output modalities or input modalities
   */
  name?: "Rich Text" | "TTS" | "Audio Script" | "Text" | "Interactivity" | "Voice" | "DTMF";
  /**
   * True if the modality is disabled; otherwise, false
   */
  disabled?: boolean;
  /**
   * Date and time of the last modification
   */
  lastModified?: string;
  [k: string]: unknown;
}
/**
 * Represents a global confirmation behavior.
 */
export interface Confirmation {
  /**
   * UUID of the confirmation behavior
   */
  id?: string;
  /**
   * Deprecated
   */
  globalValue?: string;
  /**
   * Error handling for the confirmation behavior
   */
  confirmationRecoveryBehaviors?: RecoveryBehavior[];
  /**
   * Information type for this confirmation behavior
   */
  entityType?: "DEFAULT" | "ALPHANUM" | "DIGITS" | "DATE" | "TIME" | "CURRENCY" | "YESNO" | "PREDEFINE_NOT_SET";
  /**
   * UUID of the channel
   */
  channelId?: string;
  [k: string]: unknown;
}
/**
 * Represents a global or channel-specific recovery behavior for confirmation or error recovery handling.
 */
export interface RecoveryBehavior {
  /**
   * Event ID—e.g., nomatch1-pre-prompt, nomatch1-prompt, yes-prompt, no-prompt
   */
  event?: string;
  /**
   * Deprecated (event includes the escalation level)
   */
  escalationLevel?: number;
  processingItemsList?: ProcessingItemList;
  /**
   * True if the global recovery behavior is enabled; otherwise, false
   */
  enabled?: boolean;
  [k: string]: unknown;
}
/**
 * Processing items to perform
 */
export interface ProcessingItemList {
  /**
   * List of processing items.
   */
  processingItems?: ProcessingItemList1[];
  [k: string]: unknown;
}
/**
 * List of processing items for a specific channel.
 */
export interface ProcessingItemList1 {
  /**
   * List of processing items.
   */
  processingItems?: ProcessingItemList1[];
  [k: string]: unknown;
}
/**
 * Represents a group of nodes that make up a flow in the project.
 */
export interface Component {
  /**
   * Unique ID of the component
   */
  id?: string;
  /**
   * Name of the component
   */
  name?: string;
  /**
   * “intent” if the component is an intent component; otherwise, empty
   */
  description?: string;
  /**
   * Nodes in the component
   */
  nodes?: Node[];
  /**
   * Global event handlers (in Main) or component-level event handlers (in other components)
   */
  eventHandlers?: EventHandler[];
  /**
   * UUID of the intent that is mapped to the component, if this is an intent component; otherwise, empty
   */
  intentId?: string;
  /**
   * Date and time of the last modification (e.g., 2019-08-21T08:34:27Z)
   */
  timestamp?: string;
  [k: string]: unknown;
}
export interface SharedNodeProperties {
  /**
   * UUID of the node
   */
  id: string;
  /**
   * UUID of the parent component
   */
  parentComponentId: string;
  /**
   * Node-level event handlers—override component and global handlers
   */
  eventHandlers?: EventHandler[];
  [k: string]: unknown;
}
/**
 * Represents a global, component-level, or node-level event handler in a dialog system.
 */
export interface EventHandler {
  /**
   * UUID of the event handler.
   */
  id?: string;
  /**
   * UUID of the event to be handled by this handler.
   */
  eventId?: string;
  transition?: Transition;
  /**
   * UUID of the transition to be executed when the event is triggered.
   */
  transitionId?: string;
  /**
   * True if the event handler is for a predefined event; otherwise, false.
   */
  reserved?: boolean;
  /**
   * UUID of the component (used in global or component-level handlers).
   */
  componentId?: string;
  /**
   * UUID of the node (used only in node-level event handlers).
   */
  nodeId?: string;
  [k: string]: unknown;
}
/**
 * The transition to perform when the event is triggered.
 */
export interface Transition {
  /**
   * UUID of the transition.
   */
  id?: string;
  /**
   * Specifies the type of transition.
   */
  transitionType?: "GO_TO" | "GO_BACK_TO" | "RETURN" | "RETURN_TO_INTENT_MAPPER" | "THROW" | "NO_TRANSITION_TYPE";
  /**
   * Event string to be thrown and caught elsewhere; only used when transitionType is THROW.
   */
  eventId?: string;
  /**
   * Optional description or log message when the event is thrown; relevant for THROW transitions.
   */
  eventLog?: string;
  /**
   * Descriptive label for the transition; maximum of 63 characters.
   */
  label?: string;
  /**
   * UUID of the destination node; used with GO_TO and GO_BACK_TO transition types.
   */
  nodeId?: string;
  [k: string]: unknown;
}
/**
 * A question and answer node is the basic node type in dialog applications. It recognizes user input. In a node object literal, the question and answer node element is identified with this key: recognitionNode2.
 */
export interface RecognitionNode2 {
  /**
   * Name of the node
   */
  name?: string;
  /**
   * Description of the node
   */
  description?: string;
  initialMessage?: ProcessingItemGroup;
  /**
   * Type of data to collect—for example, INTENT_TYPE, CUSTOM_LIST_TYPE, YES_NO, NUANCE_ORDINAL_NUMBER; empty for a menu-type entity
   */
  collectionType?: string;
  /**
   * Processing items to perform for each entity value or ASR value of a menu-type, yes/no or Boolean entity; empty for list-type entities
   */
  actionConfigurations?: ActionConfiguration[];
  /**
   * UUID of the question router node handling any user input that is not recognized as the entity this question and answer node is to collect, if any; empty if collectionType is INTENT_TYPE
   */
  inputManagerReferenceId?: string;
  /**
   * UUID of the entity to collect, if any; empty if collectionType is INTENT_TYPE
   */
  entityId?: string;
  /**
   * Local recovery behaviors for handling collection events, such as no match, max no match
   */
  recoRecoveryBehaviors?: LocalRecoveryBehavior[];
  defaultIntentProcessingItem?: ProcessingItemGroup3;
  defaultConceptProcessingItem?: ProcessingItemGroup4;
  initialProcessingItem?: ProcessingItemGroup5;
  reentryMessage?: ProcessingItemGroup6;
  /**
   * Optional interactive elements for values of the entity to collect, if collectionType is CUSTOM_LIST_TYPE, YES_NO or NUANCE_BOOLEAN, and for values of the global command entity for which an override is defined at this node; otherwise, empty
   */
  clickables?: InteractiveElement[];
  view?: View;
  /**
   * Key-value pairs representing variables, entities, and other objects to pass on to the client application
   */
  inputVariablesConcepts?: {
    [k: string]: unknown;
  }[];
  /**
   * Overrides to the default global settings for this node
   */
  nodeSettingOverride?: NodeSettingOverride[];
  /**
   * Local behaviors for handling confirmation events, such as a no match, a positive or negative response to a confirmation prompt
   */
  recoConfirmationBehaviors?: LocalConfirmationBehavior[];
  /**
   * Mappings between DTMF keys and values of the entity to collect, if collectionType is CUSTOM_LIST_TYPE, YES_NO or NUANCE_BOOLEAN; otherwise, empty
   */
  dtmfToEntityValueMapping?: DtmfMapping[];
  /**
   * Local handling for specified values of the global command entity
   */
  nodeCommandOverrides?: LocalCommandOverride[];
  /**
   * UUID of defaultConceptProcessingItem
   */
  defaultConceptProcessingId?: string;
  /**
   * UUID of defaultIntentProcessingItem
   */
  defaultIntentProcessingId?: string;
  /**
   * UUID of initialProcessingItem
   */
  initialProcessingId?: string;
  /**
   * UUID of reentryMessage
   */
  reentryMessageId?: string;
  /**
   * UUID of initialMessage
   */
  initialMessageProcessingItemId?: string;
  /**
   * ate and time of the last modification, in this format: YYYY-MM-DD hh:mm:ssZ—for example, 2019-08-21T08:34:27Z
   */
  timestamp?: string;
  [k: string]: unknown;
}
/**
 * Processing items to perform before recognition
 */
export interface ProcessingItemGroup {
  /**
   * UUID of the processing item group.
   */
  id?: string;
  /**
   * Map of channel UUIDs to their processing item lists.
   */
  channelProcessingItemsMap?: {
    [k: string]: ProcessingItemList1;
  };
  /**
   * Timestamp of last modification in ISO 8601 format.
   */
  lastModified?: string;
  /**
   * UUID of the node this group belongs to.
   */
  parentNodeId?: string;
  [k: string]: unknown;
}
/**
 * Processing items to perform for the entity value (or ASR value)
 */
export interface ProcessingItemGroup1 {
  /**
   * UUID of the processing item group.
   */
  id?: string;
  /**
   * Map of channel UUIDs to their processing item lists.
   */
  channelProcessingItemsMap?: {
    [k: string]: ProcessingItemList1;
  };
  /**
   * Timestamp of last modification in ISO 8601 format.
   */
  lastModified?: string;
  /**
   * UUID of the node this group belongs to.
   */
  parentNodeId?: string;
  [k: string]: unknown;
}
/**
 * Handles no match or max no match recovery.
 */
export interface LocalRecoveryBehavior {
  /**
   * UUID of the recovery behavior.
   */
  id?: string;
  /**
   * Event ID like nomatch1-prompt.
   */
  event?: string;
  /**
   * Deprecated. Previously used for escalation levels.
   */
  escalationLevel?: number;
  processingItems?: ProcessingItemGroup2;
  /**
   * Channels where recovery is disabled.
   */
  disabledChannelIds?: string[];
  /**
   * UUID of the node this applies to.
   */
  nodeId?: string;
  /**
   * UUID of the processing item group.
   */
  processingItemsId?: string;
  [k: string]: unknown;
}
/**
 * Items executed during recovery.
 */
export interface ProcessingItemGroup2 {
  /**
   * UUID of the processing item group.
   */
  id?: string;
  /**
   * Map of channel UUIDs to their processing item lists.
   */
  channelProcessingItemsMap?: {
    [k: string]: ProcessingItemList1;
  };
  /**
   * Timestamp of last modification in ISO 8601 format.
   */
  lastModified?: string;
  /**
   * UUID of the node this group belongs to.
   */
  parentNodeId?: string;
  [k: string]: unknown;
}
/**
 * Only present if collectionType is INTENT_TYPE; processing items to perform after intent recognition
 */
export interface ProcessingItemGroup3 {
  /**
   * UUID of the processing item group.
   */
  id?: string;
  /**
   * Map of channel UUIDs to their processing item lists.
   */
  channelProcessingItemsMap?: {
    [k: string]: ProcessingItemList1;
  };
  /**
   * Timestamp of last modification in ISO 8601 format.
   */
  lastModified?: string;
  /**
   * UUID of the node this group belongs to.
   */
  parentNodeId?: string;
  [k: string]: unknown;
}
/**
 * Only present if collectionType is not INTENT_TYPE; processing items to perform after entity recognition
 */
export interface ProcessingItemGroup4 {
  /**
   * UUID of the processing item group.
   */
  id?: string;
  /**
   * Map of channel UUIDs to their processing item lists.
   */
  channelProcessingItemsMap?: {
    [k: string]: ProcessingItemList1;
  };
  /**
   * Timestamp of last modification in ISO 8601 format.
   */
  lastModified?: string;
  /**
   * UUID of the node this group belongs to.
   */
  parentNodeId?: string;
  [k: string]: unknown;
}
/**
 * Processing items to perform before the value-specific processing items—only present if collectionType is empty, YES_NO or nuance_BOOLEAN
 */
export interface ProcessingItemGroup5 {
  /**
   * UUID of the processing item group.
   */
  id?: string;
  /**
   * Map of channel UUIDs to their processing item lists.
   */
  channelProcessingItemsMap?: {
    [k: string]: ProcessingItemList1;
  };
  /**
   * Timestamp of last modification in ISO 8601 format.
   */
  lastModified?: string;
  /**
   * UUID of the node this group belongs to.
   */
  parentNodeId?: string;
  [k: string]: unknown;
}
/**
 * Optional processing items to perform before recognition—instead of initialMessage—, when the dialog flow reenters this node
 */
export interface ProcessingItemGroup6 {
  /**
   * UUID of the processing item group.
   */
  id?: string;
  /**
   * Map of channel UUIDs to their processing item lists.
   */
  channelProcessingItemsMap?: {
    [k: string]: ProcessingItemList1;
  };
  /**
   * Timestamp of last modification in ISO 8601 format.
   */
  lastModified?: string;
  /**
   * UUID of the node this group belongs to.
   */
  parentNodeId?: string;
  [k: string]: unknown;
}
/**
 * Defines a clickable UI element for users.
 */
export interface InteractiveElement {
  /**
   * UUID of the clickable element.
   */
  id?: string;
  /**
   * Display order.
   */
  order?: number;
  /**
   * Value collected when clicked.
   */
  entityValue?: string;
  /**
   * Optional description.
   */
  clickableDescription?: string;
  /**
   * Optional image URL.
   */
  imageUrl?: string;
  /**
   * Text label.
   */
  label?: string;
  /**
   * Target channel.
   */
  channel?: string;
  /**
   * Language code (e.g., en-US).
   */
  language?: string;
  /**
   * Whether the element is enabled.
   */
  enabled?: boolean;
  /**
   * Entity associated with this element.
   */
  entityId?: string;
  [k: string]: unknown;
}
/**
 * Formatting information to pass to the client application for messages and interactive elements
 */
export interface View {
  /**
   * Type of visual layout (e.g., List, Buttons).
   */
  name?: string;
  /**
   * CSS class or inline style.
   */
  style?: string;
  [k: string]: unknown;
}
/**
 * Overrides default node behavior settings.
 */
export interface NodeSettingOverride {
  /**
   * UUID of the override.
   */
  id?: string;
  /**
   * UUID of the node.
   */
  nodeId?: string;
  /**
   * Category of setting (e.g., DTMF_SETTINGS).
   */
  settingType?: string;
  /**
   * UUID of the channel.
   */
  channelId?: string;
  /**
   * Override value.
   */
  value?: string;
  /**
   * Name of the specific setting.
   */
  settingName?: string;
  /**
   * Language code (e.g., en-US).
   */
  language?: string;
  [k: string]: unknown;
}
/**
 * Handles confirmation events like yes or no prompts.
 */
export interface LocalConfirmationBehavior {
  /**
   * UUID of the confirmation behavior.
   */
  id?: string;
  /**
   * Confirmation event type.
   */
  event?: string;
  processingItems?: ProcessingItemGroup7;
  /**
   * Channels where confirmation behavior is disabled.
   */
  disabledChannelIds?: string[];
  /**
   * UUID of the node.
   */
  nodeId?: string;
  /**
   * UUID of the processing items.
   */
  processingItemsId?: string;
  [k: string]: unknown;
}
/**
 * Actions taken on confirmation.
 */
export interface ProcessingItemGroup7 {
  /**
   * UUID of the processing item group.
   */
  id?: string;
  /**
   * Map of channel UUIDs to their processing item lists.
   */
  channelProcessingItemsMap?: {
    [k: string]: ProcessingItemList1;
  };
  /**
   * Timestamp of last modification in ISO 8601 format.
   */
  lastModified?: string;
  /**
   * UUID of the node this group belongs to.
   */
  parentNodeId?: string;
  [k: string]: unknown;
}
/**
 * Maps DTMF input keys to entity values.
 */
export interface DtmfMapping {
  /**
   * UUID of the mapping.
   */
  id?: string;
  /**
   * UUID of the associated node.
   */
  nodeId?: string;
  /**
   * Channel this mapping applies to.
   */
  channelId?: string;
  /**
   * DTMF key pressed by the user.
   */
  dtmfValue?: string;
  /**
   * Mapped value.
   */
  entityValue?: string;
  /**
   * UUID of the associated entity.
   */
  entityId?: string;
  [k: string]: unknown;
}
/**
 * Local handling override for global commands.
 */
export interface LocalCommandOverride {
  /**
   * UUID of the override.
   */
  id?: string;
  /**
   * UUID of the node.
   */
  nodeId?: string;
  /**
   * UUID of the global command entity.
   */
  entityId?: string;
  /**
   * Entity value being overridden.
   */
  entityValue?: string;
  processingItems?: ProcessingItemGroup8;
  /**
   * Enable or disable override.
   */
  enabled?: boolean;
  /**
   * UUID of the processing items.
   */
  processingItemsId?: string;
  [k: string]: unknown;
}
/**
 * Processing items to run.
 */
export interface ProcessingItemGroup8 {
  /**
   * UUID of the processing item group.
   */
  id?: string;
  /**
   * Map of channel UUIDs to their processing item lists.
   */
  channelProcessingItemsMap?: {
    [k: string]: ProcessingItemList1;
  };
  /**
   * Timestamp of last modification in ISO 8601 format.
   */
  lastModified?: string;
  /**
   * UUID of the node this group belongs to.
   */
  parentNodeId?: string;
  [k: string]: unknown;
}
/**
 * A message node used to display or play messages to the user.
 */
export interface MessageNode {
  /**
   * Name of the node.
   */
  name?: string;
  /**
   * Detailed description of the node.
   */
  description?: string;
  processingItems?: ProcessingItemGroup9;
  view?: View1;
  /**
   * Overrides to global settings such as disabling barge-in.
   */
  nodeSettingOverride?: NodeSettingOverride[];
  /**
   * UUID of the associated processing item group.
   */
  processingItemsId?: string;
  /**
   * Last modified timestamp in ISO 8601 format.
   */
  timestamp?: string;
  [k: string]: unknown;
}
/**
 * List of processing items that define the message content.
 */
export interface ProcessingItemGroup9 {
  /**
   * UUID of the processing item group.
   */
  id?: string;
  /**
   * Map of channel UUIDs to their processing item lists.
   */
  channelProcessingItemsMap?: {
    [k: string]: ProcessingItemList1;
  };
  /**
   * Timestamp of last modification in ISO 8601 format.
   */
  lastModified?: string;
  /**
   * UUID of the node this group belongs to.
   */
  parentNodeId?: string;
  [k: string]: unknown;
}
/**
 * Formatting information for the client application display.
 */
export interface View1 {
  /**
   * Type of visual layout (e.g., List, Buttons).
   */
  name?: string;
  /**
   * CSS class or inline style.
   */
  style?: string;
  [k: string]: unknown;
}
/**
 * A decision node applies logic or conditions to determine the next step in the dialog without user interaction or data access.
 */
export interface DecisionNode {
  /**
   * Name of the decision node.
   */
  name?: string;
  /**
   * Detailed description of the decision node.
   */
  description?: string;
  processingItems?: ProcessingItemGroup10;
  /**
   * UUID reference for the processing item group.
   */
  processingItemsId?: string;
  /**
   * Timestamp of the last update in ISO 8601 format (e.g., 2019-08-21T08:34:27Z).
   */
  timestamp?: string;
  [k: string]: unknown;
}
/**
 * Logical processing items that determine the next action.
 */
export interface ProcessingItemGroup10 {
  /**
   * UUID of the processing item group.
   */
  id?: string;
  /**
   * Map of channel UUIDs to their processing item lists.
   */
  channelProcessingItemsMap?: {
    [k: string]: ProcessingItemList1;
  };
  /**
   * Timestamp of last modification in ISO 8601 format.
   */
  lastModified?: string;
  /**
   * UUID of the node this group belongs to.
   */
  parentNodeId?: string;
  [k: string]: unknown;
}
/**
 * A node that exchanges information with a backend system, typically retrieving data without user interaction.
 */
export interface DataAccessNode {
  /**
   * Name of the node (must not start with a number or include spaces).
   */
  name?: string;
  /**
   * Detailed description of the data access node.
   */
  description?: string;
  /**
   * Variables returned by the backend system.
   */
  outputVariables?: Variable[];
  processingItems?: ProcessingItemGroup11;
  /**
   * Deprecated field for service name.
   */
  serviceName?: string;
  /**
   * Indicates whether client-side integration is used.
   */
  externalFetchEnabled?: boolean;
  /**
   * UUID of the node to transition to upon success.
   */
  successNodeId?: string;
  /**
   * UUID of the node to transition to upon failure.
   */
  failureNodeId?: string;
  /**
   * Inputs passed to the backend system.
   */
  inputVariablesConcepts?: InputConcept[];
  /**
   * Deprecated URL extension field.
   */
  urlExtension?: string;
  /**
   * Deprecated fetch timeout in milliseconds.
   */
  fetchTimeout?: number;
  /**
   * Deprecated connection timeout in milliseconds.
   */
  connectTimeout?: number;
  /**
   * Deprecated HTTP method type.
   */
  methodType?: string;
  /**
   * Deprecated expression for backend source.
   */
  sourceExpression?: string;
  /**
   * Deprecated headers as raw string.
   */
  headers?: {
    [k: string]: unknown;
  };
  view?: View2;
  backendConfig?: BackendConfig;
  /**
   * Overrides global node settings.
   */
  nodeSettingOverride?: NodeSettingOverride[];
  /**
   * UUID of the processing item group.
   */
  processingItemsId?: string;
  /**
   * UUIDs of the output variables returned by the backend.
   */
  outputVariableIds?: string[];
  /**
   * Last modification timestamp (ISO 8601).
   */
  timestamp?: string;
  [k: string]: unknown;
}
/**
 * Represents a variable used in the project.
 */
export interface Variable {
  /**
   * UUID of the variable or SYS_VAR_channel for the predefined variable channel.
   */
  id?: string;
  /**
   * Name of the variable.
   */
  name?: string;
  /**
   * Description of the variable (maximum 255 characters).
   */
  description?: string;
  /**
   * Valid values for the variable. Not yet supported in Mix.dialog.
   */
  possibleValues?: string[];
  /**
   * Value used during preview in Mix.dialog.
   */
  uiDefaultValue?: string;
  /**
   * True if the variable is reserved.
   */
  isReserved?: boolean;
  /**
   * True if the variable should be masked in logs (for sensitive data).
   */
  masked?: boolean;
  /**
   * Reporting type of the variable.
   */
  reportingType?: "REPORTING_TYPE_NONE" | "ATTRIBUTE_TYPE" | "METRIC_TYPE" | "DIMENSION_TYPE" | "NOT_SET";
  /**
   * Data type for simple variables.
   */
  simpleVariableType?:
    | "STRING_TYPE"
    | "ALPHANUM_TYPE"
    | "DIGITS_TYPE"
    | "BOOLEAN_TYPE"
    | "INTEGER_TYPE"
    | "DECIMAL_TYPE"
    | "AMOUNT_TYPE"
    | "DATE_TYPE"
    | "TIME_TYPE"
    | "DISTANCE_TYPE"
    | "TEMPERATURE_TYPE"
    | "LIST_TYPE"
    | "DYNAMIC_ENTITY_DATA";
  /**
   * Type of items in the list for variables with LIST_TYPE.
   */
  simpleGenericType?: string;
  /**
   * UUID of the schema for list items if the list contains complex variables.
   */
  complexGenericTypeId?: string;
  /**
   * UUID of the schema used for this complex variable.
   */
  complexVariableTypeId?: string;
  /**
   * Timestamp of the last modification in ISO 8601 format.
   */
  timestamp?: string;
  [k: string]: unknown;
}
/**
 * Message shown during data access latency (single static message).
 */
export interface ProcessingItemGroup11 {
  /**
   * UUID of the processing item group.
   */
  id?: string;
  /**
   * Map of channel UUIDs to their processing item lists.
   */
  channelProcessingItemsMap?: {
    [k: string]: ProcessingItemList1;
  };
  /**
   * Timestamp of last modification in ISO 8601 format.
   */
  lastModified?: string;
  /**
   * UUID of the node this group belongs to.
   */
  parentNodeId?: string;
  [k: string]: unknown;
}
/**
 * Information to pass to backend systems.
 */
export interface InputConcept {
  variable?: Variable1;
  /**
   * UUID of the variable.
   */
  variableId?: string;
  concept?: Entity;
  /**
   * UUID of the entity.
   */
  conceptId?: string;
  /**
   * Type of intent data (e.g., INTENT_VALUE).
   */
  intent?: string;
  /**
   * Special operand like LAST_COLLECTION_INTERPRETATION.
   */
  specialOperand?: string;
  [k: string]: unknown;
}
/**
 * Represents a variable used in the project.
 */
export interface Variable1 {
  /**
   * UUID of the variable or SYS_VAR_channel for the predefined variable channel.
   */
  id?: string;
  /**
   * Name of the variable.
   */
  name?: string;
  /**
   * Description of the variable (maximum 255 characters).
   */
  description?: string;
  /**
   * Valid values for the variable. Not yet supported in Mix.dialog.
   */
  possibleValues?: string[];
  /**
   * Value used during preview in Mix.dialog.
   */
  uiDefaultValue?: string;
  /**
   * True if the variable is reserved.
   */
  isReserved?: boolean;
  /**
   * True if the variable should be masked in logs (for sensitive data).
   */
  masked?: boolean;
  /**
   * Reporting type of the variable.
   */
  reportingType?: "REPORTING_TYPE_NONE" | "ATTRIBUTE_TYPE" | "METRIC_TYPE" | "DIMENSION_TYPE" | "NOT_SET";
  /**
   * Data type for simple variables.
   */
  simpleVariableType?:
    | "STRING_TYPE"
    | "ALPHANUM_TYPE"
    | "DIGITS_TYPE"
    | "BOOLEAN_TYPE"
    | "INTEGER_TYPE"
    | "DECIMAL_TYPE"
    | "AMOUNT_TYPE"
    | "DATE_TYPE"
    | "TIME_TYPE"
    | "DISTANCE_TYPE"
    | "TEMPERATURE_TYPE"
    | "LIST_TYPE"
    | "DYNAMIC_ENTITY_DATA";
  /**
   * Type of items in the list for variables with LIST_TYPE.
   */
  simpleGenericType?: string;
  /**
   * UUID of the schema for list items if the list contains complex variables.
   */
  complexGenericTypeId?: string;
  /**
   * UUID of the schema used for this complex variable.
   */
  complexVariableTypeId?: string;
  /**
   * Timestamp of the last modification in ISO 8601 format.
   */
  timestamp?: string;
  [k: string]: unknown;
}
/**
 * Entity name.
 */
export interface Entity {
  /**
   * UUID of the entity.
   */
  id?: string;
  /**
   * ID of the project this entity belongs to.
   */
  projectId?: string;
  /**
   * Name of the entity (follows naming guidelines).
   */
  name?: string;
  /**
   * True if this entity is predefined; false if it is custom.
   */
  isInBaseOntology?: boolean;
  /**
   * Total number of values defined for the entity.
   */
  valuesCount?: number;
  /**
   * True for a dialog-type predefined entity.
   */
  isDialogType?: boolean;
  /**
   * UUID of the top-level parent in an isA relationship (for predefined/dialog entities).
   */
  predefinedConceptId?: string;
  /**
   * True if the entity is deprecated.
   */
  isDeprecated?: boolean;
  /**
   * UUID of the parent entity (used in relationship entities).
   */
  isA?: string;
  /**
   * Reserved for future use.
   */
  lastModified?: string;
  [k: string]: unknown;
}
/**
 * Formatting information for latency messages.
 */
export interface View2 {
  /**
   * Type of visual layout (e.g., List, Buttons).
   */
  name?: string;
  /**
   * CSS class or inline style.
   */
  style?: string;
  [k: string]: unknown;
}
/**
 * Information required for server-side backend integration.
 */
export interface BackendConfig {
  /**
   * Not used.
   */
  id?: string;
  /**
   * URL extension (max 2000 characters).
   */
  urlExtension?: string;
  /**
   * Timeout for fetch in milliseconds.
   */
  fetchTimeout?: number;
  /**
   * Timeout for connection in milliseconds.
   */
  connectTimeout?: number;
  /**
   * HTTP method to use (e.g., POST, GET).
   */
  method?: string;
  /**
   * Deprecated: previously used service alias.
   */
  dressName?: string;
  /**
   * List of headers for backend request.
   */
  headers?: (
    | {
        /**
         * Static header data (maximum 2048 characters)
         */
        constant?: string;
        [k: string]: unknown;
      }
    | {
        variable?: Variable2;
        [k: string]: unknown;
      }
    | {
        variableExpression?: VariableExpression;
        [k: string]: unknown;
      }
  )[];
  /**
   * ID of backend connection profile.
   */
  dressAliasId?: string;
  [k: string]: unknown;
}
/**
 * Represents a variable used in the project.
 */
export interface Variable2 {
  /**
   * UUID of the variable or SYS_VAR_channel for the predefined variable channel.
   */
  id?: string;
  /**
   * Name of the variable.
   */
  name?: string;
  /**
   * Description of the variable (maximum 255 characters).
   */
  description?: string;
  /**
   * Valid values for the variable. Not yet supported in Mix.dialog.
   */
  possibleValues?: string[];
  /**
   * Value used during preview in Mix.dialog.
   */
  uiDefaultValue?: string;
  /**
   * True if the variable is reserved.
   */
  isReserved?: boolean;
  /**
   * True if the variable should be masked in logs (for sensitive data).
   */
  masked?: boolean;
  /**
   * Reporting type of the variable.
   */
  reportingType?: "REPORTING_TYPE_NONE" | "ATTRIBUTE_TYPE" | "METRIC_TYPE" | "DIMENSION_TYPE" | "NOT_SET";
  /**
   * Data type for simple variables.
   */
  simpleVariableType?:
    | "STRING_TYPE"
    | "ALPHANUM_TYPE"
    | "DIGITS_TYPE"
    | "BOOLEAN_TYPE"
    | "INTEGER_TYPE"
    | "DECIMAL_TYPE"
    | "AMOUNT_TYPE"
    | "DATE_TYPE"
    | "TIME_TYPE"
    | "DISTANCE_TYPE"
    | "TEMPERATURE_TYPE"
    | "LIST_TYPE"
    | "DYNAMIC_ENTITY_DATA";
  /**
   * Type of items in the list for variables with LIST_TYPE.
   */
  simpleGenericType?: string;
  /**
   * UUID of the schema for list items if the list contains complex variables.
   */
  complexGenericTypeId?: string;
  /**
   * UUID of the schema used for this complex variable.
   */
  complexVariableTypeId?: string;
  /**
   * Timestamp of the last modification in ISO 8601 format.
   */
  timestamp?: string;
  [k: string]: unknown;
}
/**
 * Complex variable field, used as dynamic header data
 */
export interface VariableExpression {
  /**
   * UUID of the variable expression
   */
  id?: string;
  /**
   * UUID of the variable being referenced in the expression
   */
  variableId?: string;
  /**
   * Date and time of the last modification, in ISO 8601 format (e.g., 2019-08-21T08:34:27Z)
   */
  timestamp?: string;
  /**
   * Operations to be performed against the specified variable. Multiple operations are chained—each applied to the result of the previous one.
   */
  operations?: VariableOperation[];
  [k: string]: unknown;
}
/**
 * An operation applied to a variable in the expression chain
 */
export interface VariableOperation {
  /**
   * Selects a field from the schema of a complex variable. Used to navigate deeply nested structures.
   */
  selectField?: {
    [k: string]: string;
  };
  callMethod?: CallMethod;
  [k: string]: unknown;
}
/**
 * Calls a method on the specified variable or field.
 */
export interface CallMethod {
  /**
   * Name of the method to call (e.g., 'length', 'random', 'getDay'). The available methods depend on the variable type.
   */
  methodName?: string;
  /**
   * Optional list of key-value pairs representing the parameters for the method. Can be empty if no parameters are needed.
   */
  parameters?: MethodParameter[];
  [k: string]: unknown;
}
/**
 * Represents a parameter in a method call. Only one of 'constant', 'variableId', or 'conceptId' should be specified.
 */
export interface MethodParameter {
  /**
   * Constant string value to be passed to the method
   */
  constant?: string;
  /**
   * UUID of a variable to be passed to the method. May also be a special system variable like 'SYS_VAR_channel'
   */
  variableId?: string;
  /**
   * UUID of a concept or entity to be passed to the method
   */
  conceptId?: string;
  [k: string]: unknown;
}
/**
 * A question router node that collects multiple entities and routes dialog flow based on what is collected.
 */
export interface ControllerNode {
  /**
   * Name of the node. Must follow naming guidelines.
   */
  name?: string;
  /**
   * Detailed description of the node.
   */
  description?: string;
  initialTransition?: ProcessingItemGroup12;
  finalTransition?: ProcessingItemGroup13;
  /**
   * List of entity references handled by this node.
   */
  concepts?: EntityReference[];
  /**
   * Indicates whether intent switching is disabled (default: false).
   */
  intentSwitchingDisabled?: boolean;
  intentSwitchTransition?: Transition1;
  /**
   * UUID of the intent switch transition.
   */
  intentSwitchTransitionId?: string;
  /**
   * UUID of the initial transition.
   */
  initialTransitionId?: string;
  /**
   * UUID of the final transition.
   */
  finalTransitionId?: string;
  /**
   * Timestamp of the last modification (ISO 8601 format).
   */
  timestamp?: string;
  [k: string]: unknown;
}
/**
 * Optional transition before entity collection begins.
 */
export interface ProcessingItemGroup12 {
  /**
   * UUID of the processing item group.
   */
  id?: string;
  /**
   * Map of channel UUIDs to their processing item lists.
   */
  channelProcessingItemsMap?: {
    [k: string]: ProcessingItemList1;
  };
  /**
   * Timestamp of last modification in ISO 8601 format.
   */
  lastModified?: string;
  /**
   * UUID of the node this group belongs to.
   */
  parentNodeId?: string;
  [k: string]: unknown;
}
/**
 * Mandatory transition after all entities are collected.
 */
export interface ProcessingItemGroup13 {
  /**
   * UUID of the processing item group.
   */
  id?: string;
  /**
   * Map of channel UUIDs to their processing item lists.
   */
  channelProcessingItemsMap?: {
    [k: string]: ProcessingItemList1;
  };
  /**
   * Timestamp of last modification in ISO 8601 format.
   */
  lastModified?: string;
  /**
   * UUID of the node this group belongs to.
   */
  parentNodeId?: string;
  [k: string]: unknown;
}
/**
 * Entity collection logic for the question router node.
 */
export interface EntityReference {
  /**
   * UUID of the entity to be collected.
   */
  conceptId?: string;
  collectExpression?: Expression;
  /**
   * UUID of the node used to collect the entity.
   */
  collectGotoNodeId?: string;
  processExpression?: Expression3;
  /**
   * UUID of the node to transition to after processing.
   */
  processGotoNodeId?: string;
  multiConceptExpression?: Expression4;
  /**
   * UUID of the collect expression.
   */
  collectExpressionId?: string;
  /**
   * UUID of the process expression.
   */
  processExpressionId?: string;
  /**
   * UUID of the multi-concept expression.
   */
  multiConceptExpressionId?: string;
  /**
   * Legacy name of the concept, maintained for compatibility.
   */
  conceptName?: string;
  /**
   * True if completion status is set manually; otherwise, false.
   */
  manualComplete?: boolean;
  [k: string]: unknown;
}
/**
 * Complex variable field or method result used as the left operand.
 */
export interface VariableExpression1 {
  /**
   * UUID of the variable expression
   */
  id?: string;
  /**
   * UUID of the variable being referenced in the expression
   */
  variableId?: string;
  /**
   * Date and time of the last modification, in ISO 8601 format (e.g., 2019-08-21T08:34:27Z)
   */
  timestamp?: string;
  /**
   * Operations to be performed against the specified variable. Multiple operations are chained—each applied to the result of the previous one.
   */
  operations?: VariableOperation[];
  [k: string]: unknown;
}
/**
 * Represents a variable used in the project.
 */
export interface Variable3 {
  /**
   * UUID of the variable or SYS_VAR_channel for the predefined variable channel.
   */
  id?: string;
  /**
   * Name of the variable.
   */
  name?: string;
  /**
   * Description of the variable (maximum 255 characters).
   */
  description?: string;
  /**
   * Valid values for the variable. Not yet supported in Mix.dialog.
   */
  possibleValues?: string[];
  /**
   * Value used during preview in Mix.dialog.
   */
  uiDefaultValue?: string;
  /**
   * True if the variable is reserved.
   */
  isReserved?: boolean;
  /**
   * True if the variable should be masked in logs (for sensitive data).
   */
  masked?: boolean;
  /**
   * Reporting type of the variable.
   */
  reportingType?: "REPORTING_TYPE_NONE" | "ATTRIBUTE_TYPE" | "METRIC_TYPE" | "DIMENSION_TYPE" | "NOT_SET";
  /**
   * Data type for simple variables.
   */
  simpleVariableType?:
    | "STRING_TYPE"
    | "ALPHANUM_TYPE"
    | "DIGITS_TYPE"
    | "BOOLEAN_TYPE"
    | "INTEGER_TYPE"
    | "DECIMAL_TYPE"
    | "AMOUNT_TYPE"
    | "DATE_TYPE"
    | "TIME_TYPE"
    | "DISTANCE_TYPE"
    | "TEMPERATURE_TYPE"
    | "LIST_TYPE"
    | "DYNAMIC_ENTITY_DATA";
  /**
   * Type of items in the list for variables with LIST_TYPE.
   */
  simpleGenericType?: string;
  /**
   * UUID of the schema for list items if the list contains complex variables.
   */
  complexGenericTypeId?: string;
  /**
   * UUID of the schema used for this complex variable.
   */
  complexVariableTypeId?: string;
  /**
   * Timestamp of the last modification in ISO 8601 format.
   */
  timestamp?: string;
  [k: string]: unknown;
}
/**
 * Complex variable expression used as the right operand.
 */
export interface VariableExpression2 {
  /**
   * UUID of the variable expression
   */
  id?: string;
  /**
   * UUID of the variable being referenced in the expression
   */
  variableId?: string;
  /**
   * Date and time of the last modification, in ISO 8601 format (e.g., 2019-08-21T08:34:27Z)
   */
  timestamp?: string;
  /**
   * Operations to be performed against the specified variable. Multiple operations are chained—each applied to the result of the previous one.
   */
  operations?: VariableOperation[];
  [k: string]: unknown;
}
/**
 * Transition executed when intent switching is detected.
 */
export interface Transition1 {
  /**
   * UUID of the transition.
   */
  id?: string;
  /**
   * Specifies the type of transition.
   */
  transitionType?: "GO_TO" | "GO_BACK_TO" | "RETURN" | "RETURN_TO_INTENT_MAPPER" | "THROW" | "NO_TRANSITION_TYPE";
  /**
   * Event string to be thrown and caught elsewhere; only used when transitionType is THROW.
   */
  eventId?: string;
  /**
   * Optional description or log message when the event is thrown; relevant for THROW transitions.
   */
  eventLog?: string;
  /**
   * Descriptive label for the transition; maximum of 63 characters.
   */
  label?: string;
  /**
   * UUID of the destination node; used with GO_TO and GO_BACK_TO transition types.
   */
  nodeId?: string;
  [k: string]: unknown;
}
/**
 * An intent mapper node handles NLU routing by mapping intents to specific components or nodes.
 */
export interface IntentMapperNode2 {
  /**
   * Name of the node, following naming guidelines.
   */
  name?: string;
  /**
   * Detailed description of the node.
   */
  description?: string;
  /**
   * List of local intent-to-destination mappings overriding global mappings.
   */
  intentMappings?: NodeIntentMapping[];
  transition?: Transition2;
  /**
   * UUID of the transition associated with this intent mapper node.
   */
  transitionId?: string;
  /**
   * Timestamp of the last modification (ISO 8601 format).
   */
  timestamp?: string;
  [k: string]: unknown;
}
/**
 * Defines how a specific intent maps to a destination component or node.
 */
export interface NodeIntentMapping {
  /**
   * UUID of the intent mapping.
   */
  id?: string;
  /**
   * UUID of the intent mapper node.
   */
  nodeId?: string;
  /**
   * UUID of the intent being mapped.
   */
  intentId?: string;
  destination?: MappingDestination;
  [k: string]: unknown;
}
/**
 * Destination for the mapped intent (component or node).
 */
export interface MappingDestination {
  /**
   * UUID of the destination component.
   */
  componentId?: string;
  /**
   * UUID of the destination node.
   */
  nodeId?: string;
  [k: string]: unknown;
}
/**
 * Specifies the transition after completing the interaction for a mapped intent.
 */
export interface Transition2 {
  /**
   * UUID of the transition.
   */
  id?: string;
  /**
   * Specifies the type of transition.
   */
  transitionType?: "GO_TO" | "GO_BACK_TO" | "RETURN" | "RETURN_TO_INTENT_MAPPER" | "THROW" | "NO_TRANSITION_TYPE";
  /**
   * Event string to be thrown and caught elsewhere; only used when transitionType is THROW.
   */
  eventId?: string;
  /**
   * Optional description or log message when the event is thrown; relevant for THROW transitions.
   */
  eventLog?: string;
  /**
   * Descriptive label for the transition; maximum of 63 characters.
   */
  label?: string;
  /**
   * UUID of the destination node; used with GO_TO and GO_BACK_TO transition types.
   */
  nodeId?: string;
  [k: string]: unknown;
}
/**
 * A component call node transitions the dialog into another component and defines return behavior after that component completes.
 */
export interface ComponentNode {
  /**
   * Name of the node (must follow naming guidelines).
   */
  name?: string;
  /**
   * Description of the node.
   */
  description?: string;
  /**
   * UUID of the component to invoke.
   */
  componentId?: string;
  processingItems?: ProcessingItemGroup14;
  /**
   * UUID of the processing item group.
   */
  processingItemsId?: string;
  /**
   * Date and time of the last modification (ISO 8601 format).
   */
  timestamp?: string;
  [k: string]: unknown;
}
/**
 * Processing items executed when returning from the component (transitions only).
 */
export interface ProcessingItemGroup14 {
  /**
   * UUID of the processing item group.
   */
  id?: string;
  /**
   * Map of channel UUIDs to their processing item lists.
   */
  channelProcessingItemsMap?: {
    [k: string]: ProcessingItemList1;
  };
  /**
   * Timestamp of last modification in ISO 8601 format.
   */
  lastModified?: string;
  /**
   * UUID of the node this group belongs to.
   */
  parentNodeId?: string;
  [k: string]: unknown;
}
/**
 * Represents the entry point of an application (Start node) or a component (Enter node).
 */
export interface StartNode {
  /**
   * Name of the node. For Start or Enter nodes, this should always be 'start'.
   */
  name?: string;
  /**
   * Detailed description of the node.
   */
  description?: string;
  processingItems?: ProcessingItemGroup15;
  /**
   * UUID of the next node in the dialog flow.
   */
  nodeId?: string;
  /**
   * UUID of the processing item group.
   */
  processingItemsId?: string;
  /**
   * Date and time of the last modification (ISO 8601 format).
   */
  timestamp?: string;
  [k: string]: unknown;
}
/**
 * List of processing items to execute at entry (supports actions only).
 */
export interface ProcessingItemGroup15 {
  /**
   * UUID of the processing item group.
   */
  id?: string;
  /**
   * Map of channel UUIDs to their processing item lists.
   */
  channelProcessingItemsMap?: {
    [k: string]: ProcessingItemList1;
  };
  /**
   * Timestamp of last modification in ISO 8601 format.
   */
  lastModified?: string;
  /**
   * UUID of the node this group belongs to.
   */
  parentNodeId?: string;
  [k: string]: unknown;
}
/**
 * A node representing external actions like ending a conversation or escalating to a live agent.
 */
export interface ExternalactionNode {
  /**
   * Name of the node (must follow naming guidelines).
   */
  name?: string;
  /**
   * Detailed description of the node.
   */
  description?: string;
  /**
   * The type of action to perform—either END or ESCALATE.
   */
  actionType?: "END" | "ESCALATE";
  escalationDetails?: EscalationDetails;
  /**
   * Key-value pairs of variables and concepts to pass to the client.
   */
  inputVariablesConcepts?: InputConcept[];
  /**
   * Variables expected from the client application.
   */
  outputVariables?: Variable[];
  successTransition?: Transition3;
  failureTransition?: Transition4;
  /**
   * UUID of the success transition.
   */
  successTransitionId?: string;
  /**
   * UUID of the failure transition.
   */
  failureTransitionId?: string;
  /**
   * UUIDs of variables returned by the client application.
   */
  outputVariableIds?: string[];
  /**
   * Last modification timestamp (ISO 8601 format).
   */
  timestamp?: string;
  [k: string]: unknown;
}
/**
 * Details of the escalation, only present if actionType is ESCALATE.
 */
export interface EscalationDetails {
  /**
   * Type of transfer
   */
  escalationType?: "BLIND" | "ROUTE_REQUEST";
  destination?: EscalationDestination;
  [k: string]: unknown;
}
/**
 * Destination for the transfer.
 */
export interface EscalationDestination {
  /**
   * Static string used as the transfer target.
   */
  destinationConstant?: string;
  /**
   * Variable used to define the transfer target.
   */
  destinationVariable?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * Transition to follow upon successful escalation.
 */
export interface Transition3 {
  /**
   * UUID of the transition.
   */
  id?: string;
  /**
   * Specifies the type of transition.
   */
  transitionType?: "GO_TO" | "GO_BACK_TO" | "RETURN" | "RETURN_TO_INTENT_MAPPER" | "THROW" | "NO_TRANSITION_TYPE";
  /**
   * Event string to be thrown and caught elsewhere; only used when transitionType is THROW.
   */
  eventId?: string;
  /**
   * Optional description or log message when the event is thrown; relevant for THROW transitions.
   */
  eventLog?: string;
  /**
   * Descriptive label for the transition; maximum of 63 characters.
   */
  label?: string;
  /**
   * UUID of the destination node; used with GO_TO and GO_BACK_TO transition types.
   */
  nodeId?: string;
  [k: string]: unknown;
}
/**
 * Transition to follow if escalation fails.
 */
export interface Transition4 {
  /**
   * UUID of the transition.
   */
  id?: string;
  /**
   * Specifies the type of transition.
   */
  transitionType?: "GO_TO" | "GO_BACK_TO" | "RETURN" | "RETURN_TO_INTENT_MAPPER" | "THROW" | "NO_TRANSITION_TYPE";
  /**
   * Event string to be thrown and caught elsewhere; only used when transitionType is THROW.
   */
  eventId?: string;
  /**
   * Optional description or log message when the event is thrown; relevant for THROW transitions.
   */
  eventLog?: string;
  /**
   * Descriptive label for the transition; maximum of 63 characters.
   */
  label?: string;
  /**
   * UUID of the destination node; used with GO_TO and GO_BACK_TO transition types.
   */
  nodeId?: string;
  [k: string]: unknown;
}
/**
 * Represents an end node in the project - deprecated
 */
export interface EndNode {
  [k: string]: unknown;
}
/**
 * Represents an end node in the project - deprecated
 */
export interface TransferNode {
  [k: string]: unknown;
}
/**
 * Represents a global (default) or channel-specific error recovery handling.
 */
export interface RecoveryHandling {
  /**
   * UUID of the recovery behavior
   */
  id?: string;
  /**
   * Deprecated
   */
  globalValue?: string;
  /**
   * Error handling for the recovery behavior
   */
  recoveryBehaviors?: RecoveryBehavior[];
  /**
   * UUID of the channel
   */
  channelId?: string;
  [k: string]: unknown;
}
/**
 * Represents a complex variable schema in the project.
 */
export interface Schema {
  /**
   * UUID of the schema.
   */
  id?: string;
  /**
   * Name of the schema (follows naming guidelines).
   */
  name?: string;
  /**
   * Description of the schema (maximum 255 characters).
   */
  description?: string;
  /**
   * List of variables included in the schema.
   *
   * @minItems 1
   */
  fields?: [Variable, ...Variable[]];
  /**
   * True if this is a reserved schema (e.g., DynamicMessageReference); otherwise, false.
   */
  isReserved?: boolean;
  [k: string]: unknown;
}
/**
 * A group of related prompts, used to present messages in a dialog system.
 */
export interface PromptGroup {
  /**
   * UUID of the prompt group.
   */
  id?: string;
  /**
   * Name of the prompt group.
   */
  name?: string;
  /**
   * List of prompts in this group.
   */
  prompts?: Prompt[];
  /**
   * Name of the audio file for the Audio Script modality.
   */
  audioFileId?: string;
  /**
   * If true, barge-in is disabled for this prompt group.
   */
  bargeinDisabled?: boolean;
  /**
   * Date and time the prompt group was last modified.
   */
  lastModified?: string;
  [k: string]: unknown;
}
/**
 * A single prompt entry in the group.
 */
export interface Prompt {
  payload?: PromptPayload;
  /**
   * Locale code for the prompt (e.g., en-US).
   */
  language?: string;
  /**
   * UUID of the channel this prompt is used for.
   */
  channel?: string;
  /**
   * Last modification time for the prompt.
   */
  lastModified?: string;
  [k: string]: unknown;
}
/**
 * Content payload of the prompt.
 */
export interface PromptPayload {
  /**
   * Text to display with dynamic placeholders.
   */
  displayText?: string;
  /**
   * Text to be spoken by TTS, with placeholders.
   */
  ttsText?: string;
  /**
   * Deprecated. Path to audio file.
   */
  audioFile?: string;
  /**
   * Annotations in the display text.
   */
  displayTextAnnotations?: Annotation[];
  /**
   * Annotations in the TTS text.
   */
  ttsTextAnnotations?: Annotation[];
  /**
   * Backup TTS text if audio file is unavailable.
   */
  ttsAudioBackup?: string;
  /**
   * Annotations in the backup TTS text.
   */
  ttsAudioBackupAnnotations?: Annotation[];
  [k: string]: unknown;
}
/**
 * Represents a variable used in the project.
 */
export interface Variable4 {
  /**
   * UUID of the variable or SYS_VAR_channel for the predefined variable channel.
   */
  id?: string;
  /**
   * Name of the variable.
   */
  name?: string;
  /**
   * Description of the variable (maximum 255 characters).
   */
  description?: string;
  /**
   * Valid values for the variable. Not yet supported in Mix.dialog.
   */
  possibleValues?: string[];
  /**
   * Value used during preview in Mix.dialog.
   */
  uiDefaultValue?: string;
  /**
   * True if the variable is reserved.
   */
  isReserved?: boolean;
  /**
   * True if the variable should be masked in logs (for sensitive data).
   */
  masked?: boolean;
  /**
   * Reporting type of the variable.
   */
  reportingType?: "REPORTING_TYPE_NONE" | "ATTRIBUTE_TYPE" | "METRIC_TYPE" | "DIMENSION_TYPE" | "NOT_SET";
  /**
   * Data type for simple variables.
   */
  simpleVariableType?:
    | "STRING_TYPE"
    | "ALPHANUM_TYPE"
    | "DIGITS_TYPE"
    | "BOOLEAN_TYPE"
    | "INTEGER_TYPE"
    | "DECIMAL_TYPE"
    | "AMOUNT_TYPE"
    | "DATE_TYPE"
    | "TIME_TYPE"
    | "DISTANCE_TYPE"
    | "TEMPERATURE_TYPE"
    | "LIST_TYPE"
    | "DYNAMIC_ENTITY_DATA";
  /**
   * Type of items in the list for variables with LIST_TYPE.
   */
  simpleGenericType?: string;
  /**
   * UUID of the schema for list items if the list contains complex variables.
   */
  complexGenericTypeId?: string;
  /**
   * UUID of the schema used for this complex variable.
   */
  complexVariableTypeId?: string;
  /**
   * Timestamp of the last modification in ISO 8601 format.
   */
  timestamp?: string;
  [k: string]: unknown;
}
/**
 * Complex variable field, or the result of a supported method against a variable, to include in the message
 */
export interface VariableExpression3 {
  /**
   * UUID of the variable expression
   */
  id?: string;
  /**
   * UUID of the variable being referenced in the expression
   */
  variableId?: string;
  /**
   * Date and time of the last modification, in ISO 8601 format (e.g., 2019-08-21T08:34:27Z)
   */
  timestamp?: string;
  /**
   * Operations to be performed against the specified variable. Multiple operations are chained—each applied to the result of the previous one.
   */
  operations?: VariableOperation[];
  [k: string]: unknown;
}
/**
 * Intents and entities for this dialog project
 */
export interface Ontology {
  /**
   * ID of the project.
   */
  projectId?: string;
  /**
   * List of intents defined in the project.
   */
  intents?: Intent[];
  /**
   * List of entities (concepts) defined in the project.
   */
  concepts?: Entity1[];
  /**
   * Reserved for future use.
   */
  lastModified?: string;
  [k: string]: unknown;
}
/**
 * Represents an intent in the project.
 */
export interface Intent {
  /**
   * Unique ID of the intent.
   */
  id?: string;
  /**
   * ID of the project this intent belongs to.
   */
  projectId?: string;
  /**
   * Name of the intent (follows naming guidelines).
   */
  name?: string;
  /**
   * List of UUIDs for the entities associated with this intent.
   */
  conceptIds?: string[];
  /**
   * True if this intent is predefined; false if it is custom.
   */
  isInBaseOntology?: boolean;
  /**
   * Reserved for future use.
   */
  lastModified?: string;
  [k: string]: unknown;
}
/**
 * Represents an entity (concept) in the project.
 */
export interface Entity1 {
  /**
   * UUID of the entity.
   */
  id?: string;
  /**
   * ID of the project this entity belongs to.
   */
  projectId?: string;
  /**
   * Name of the entity (follows naming guidelines).
   */
  name?: string;
  /**
   * True if this entity is predefined; false if it is custom.
   */
  isInBaseOntology?: boolean;
  /**
   * Total number of values defined for the entity.
   */
  valuesCount?: number;
  /**
   * True for a dialog-type predefined entity.
   */
  isDialogType?: boolean;
  /**
   * UUID of the top-level parent in an isA relationship (for predefined/dialog entities).
   */
  predefinedConceptId?: string;
  /**
   * True if the entity is deprecated.
   */
  isDeprecated?: boolean;
  /**
   * UUID of the parent entity (used in relationship entities).
   */
  isA?: string;
  /**
   * Reserved for future use.
   */
  lastModified?: string;
  [k: string]: unknown;
}
/**
 * Represents a backend connection preset to be applied to a data access node for server-side integration.
 */
export interface BackendConnectionPreset {
  /**
   * UUID of the preset
   */
  id?: string;
  /**
   * Name of the preset
   */
  name?: string;
  /**
   * URL extension (maximum 2000 characters)
   */
  urlExtension?: string;
  /**
   * Fetch timeout in milliseconds (default: 0)
   */
  fetchTimeout?: number;
  /**
   * Connection timeout in milliseconds (default: 0)
   */
  connectTimeout?: number;
  /**
   * HTTP method to use for the connection
   */
  method?: "POST" | "GET" | "PUT" | "DELETE" | "PATCH" | "NOT_SET";
  /**
   * Deprecated (superseded by dressAliasId)
   */
  dressName?: string;
  /**
   * Headers used to query the backend system
   */
  headers?: Header[];
  /**
   * Numeric ID of the connection profile for the backend system
   */
  dressAliasId?: string;
  [k: string]: unknown;
}
/**
 * Represents a header used in backend connection data for a data access node or connection preset.
 */
export interface Header {
  /**
   * Name of the header.
   */
  key?: string;
  /**
   * Value of the header. One of the supported header types.
   */
  header?: ConstantHeader | VariableHeader | VariableExpressionHeader;
  /**
   * UUID of the variable; only present for headers of type 'variable'.
   */
  variableId?: string;
  /**
   * UUID of the complex variable field; only present for headers of type 'variableExpression'.
   */
  variableExpressionId?: string;
  [k: string]: unknown;
}
/**
 * Static header value.
 */
export interface ConstantHeader {
  /**
   * Static header data (maximum 2048 characters).
   */
  constant?: string;
  [k: string]: unknown;
}
/**
 * Header value derived from a variable.
 */
export interface VariableHeader {
  variable?: Variable;
  [k: string]: unknown;
}
/**
 * Header value derived from a complex variable field.
 */
export interface VariableExpressionHeader {
  variableExpression?: VariableExpression4;
  [k: string]: unknown;
}
/**
 * Represents a complex variable field, or the result of a supported method against a variable.
 */
export interface VariableExpression4 {
  /**
   * UUID of the variable expression
   */
  id?: string;
  /**
   * UUID of the variable being referenced in the expression
   */
  variableId?: string;
  /**
   * Date and time of the last modification, in ISO 8601 format (e.g., 2019-08-21T08:34:27Z)
   */
  timestamp?: string;
  /**
   * Operations to be performed against the specified variable. Multiple operations are chained—each applied to the result of the previous one.
   */
  operations?: VariableOperation[];
  [k: string]: unknown;
}
/**
 * Represents an event in the project.
 */
export interface Event {
  /**
   * UUID of the event
   */
  id?: string;
  /**
   * The event to throw—for example, event.nuance.dialog.escalate
   */
  eventString?: string;
  /**
   * Display name of the event—for example, Escalate
   */
  uiString?: string;
  /**
   * True if the event can be used in a throw action; otherwise, false
   */
  throwable?: boolean;
  /**
   * True for predefined events; false for custom events
   */
  reserved?: boolean;
  [k: string]: unknown;
}
/**
 * Represents a global command in the project.
 */
export interface Command {
  /**
   * UUID of the command
   */
  id?: string;
  /**
   * Global command entity value to invoke the command
   */
  entityValue?: string;
  event?: Event1;
  /**
   * DTMF value to invoke the command
   */
  dtmfValue?: string;
  /**
   * True if the command is enabled in this project; otherwise, false
   */
  projectLevelEnabled?: boolean;
  /**
   * Nodes where this command is disabled—Future use
   */
  disabledNodeIds?: string[];
  /**
   * Components where this command is disabled—Future use
   */
  disabledComponentIds?: string[];
  /**
   * Date and time of the last modification, in the format: YYYY-MM-DDThh:mm:ssZ
   */
  timestamp?: string;
  [k: string]: unknown;
}
/**
 * Represents an event in the project.
 */
export interface Event1 {
  /**
   * UUID of the event
   */
  id?: string;
  /**
   * The event to throw—for example, event.nuance.dialog.escalate
   */
  eventString?: string;
  /**
   * Display name of the event—for example, Escalate
   */
  uiString?: string;
  /**
   * True if the event can be used in a throw action; otherwise, false
   */
  throwable?: boolean;
  /**
   * True for predefined events; false for custom events
   */
  reserved?: boolean;
  [k: string]: unknown;
}
/**
 * Represents a data host alias for server-side integration.
 */
export interface DataHostAlias {
  /**
   * Numeric ID of the connection profile for the backend system
   */
  id?: string;
  /**
   * Alias name for a web service used for backend access in a server-side integration
   */
  alias?: string;
  /**
   * Default URL for the alias (optional)
   */
  defaultValue?: string;
  [k: string]: unknown;
}
/**
 * Represents an override to the global settings defaults in the project.
 */
export interface GlobalSettingOverride {
  /**
   * UUID of the setting override
   */
  id?: string;
  /**
   * Name of the setting
   */
  settingName?: string;
  /**
   * Setting category
   */
  settingType?:
    | "COPILOT_SETTINGS"
    | "COLLECTION_SETTINGS"
    | "CONFIRMATION_SETTINGS"
    | "DTMF_SETTINGS"
    | "TTS_SETTINGS"
    | "SPEECH_SETTINGS"
    | "CONVERSATION_SETTINGS"
    | "AUDIO_SETTINGS"
    | "GRAMMAR_SETTINGS"
    | "DATA_ACCESS_SETTINGS"
    | "INTERNAL_SETTINGS";
  /**
   * UUID of the channel for the override
   */
  channelId?: string;
  /**
   * For an entity-level setting override: type of entity
   */
  predefinedName?:
    | "CUSTOM_LIST_TYPE"
    | "REGEX"
    | "FREE_FORM"
    | "DATE"
    | "TIME"
    | "YES_NO"
    | "NUANCE_AMOUNT"
    | "NUANCE_BOOLEAN"
    | "NUANCE_CARDINAL_NUMBER"
    | "NUANCE_DISTANCE"
    | "NUANCE_DOUBLE"
    | "NUANCE_EXPIRY_DATE"
    | "NUANCE_GENERIC_ORDER"
    | "NUANCE_NUMBER"
    | "NUANCE_ORDINAL_NUMBER"
    | "NUANCE_TEMPERATURE"
    | "PREDEFINE_NOT_SET";
  /**
   * Override value
   */
  value?: string;
  /**
   * Language to which the override applies (e.g., en-US)
   */
  language?: string;
  /**
   * UUID of the entity to which the override applies; otherwise, empty
   */
  entityId?: string;
  [k: string]: unknown;
}
/**
 * Represents the global mapping of one intent to a component. Intent mapper nodes inherit these global mappings and can override them if needed.
 */
export interface ProjectIntentMapping {
  /**
   * UUID of the mapping
   */
  id?: string;
  /**
   * UUID of the intent being mapped
   */
  intentId?: string;
  /**
   * Key-value pair where the key is componentId and the value is the UUID of the component
   */
  destination?: {
    /**
     * UUID of the component to which the intent is mapped
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[a-zA-Z0-9_-]+$".
     */
    [k: string]: string;
  };
  [k: string]: unknown;
}
/**
 * Represents an environment configuration, currently limited to specifying a default base URL for external grammars.
 */
export interface EnvironmentConfiguration {
  /**
   * GRAMMAR_BASE_PATH if the project is configured with a default base URL for external grammars
   */
  label?: string;
  /**
   * Default base URL for external grammars (e.g., http://myfileserver:9000)
   */
  value?: string;
  [k: string]: unknown;
}
